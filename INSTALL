FastBit is packaged with GNU build tools.  In most cases, this means you
only need to run "./configure && make" to build the library and the
examples.  The following instructions are for customizing your
configuration and building process.

On systems where make (or gmake) can support parallel builds, it is safe
to invoke the parallel build options to build the library and the
executables, for example,

gmake -j 3 all

Since it take a while (~ 20 min) to build the libraries, it is a good
idea to spawn multiple jobs to compile them.  However, it is NOT safe to
run the tests in parallel because different jobs will attempt to write
the same files.  The commands 'make check', 'make more-check', and 'make
full-check' must be run as serial jobs (with only one thread of
execution).

If you are compiling with GCC, please choose version 4 for better
support of the extensive template use.

To place the executable files and libraries in their expected locations,
execute 'make install'.  One make change where the files are installed
by specifying a prefix, e.g., (it is usually better to specify
installation direcotry on the command line of configure, see note 13 )

make prefix=${HOME} install

which will put the executables in ${HOME}/bin and libraries in
${HOME}/lib.  Prior to installation, the executables and libraries are
located in various hidden directories selected by libtools.  For
example, libibis.a is usually located in src/.libs and the executables
in examples are in examples/.libs.


----------
Configuration Options

Run './configure --help' to review all options available.  The majority
of the options are standard options available to all GNU build tools.
There are only two additional options
  --enable-debug [extra debugging option]
  --enable-xopt  [extra optimization option]

The default for the 1st option is left to the configure script itself,
which in anbsence of any direction will normally enable the debug
option.  The default for the 2nd option is "no", in which case, the flag
present in CXXFLAGS or the default determined by the configure script
will be used.  With --enable-xopt, the optimization flag -O5 will be
used if the compiler accepts it otherwise -O3 will be append to the list
of compiler options.  The option -O5 is generally supported by GCC
compilers and can slightly improve the performance of some query
operations, but may also introduce errors due to excessive compiler
"optimization."  In most cases, we suggest that users leave both of
these options at default values.

If CXXFLAGS is specified on the command line to configure or is present
as an evironment variable, the configure script will not add its usually
"-g -O2" options.  If CXXFLAGS is specified, it should include desired
optimization flags.


The configure script will attempt to detect whether a JDK is available
when it is run, however, the detection mechanism primarily rely on the
presence of environment variable JAVA_HOME.  If this variable is not
defined or you want to use a different JDK, you may use the following
option of the configure script to explicitly specify the path of JDK,

  --with-java=full-path-to-jdk

On MS Windows with visual studio, the path to JDK must be explicitly
speicified in the visual studio project for the java project.  Here are
some steps to take

(1) open the windows explorer, navigate to win directory in your FastBit
    directory, double click on ibis.sln should invoke visual studio if
    your machine have visual studio,

(2) the solution should have 7 projects, right click on the java
    project, select properties from the menu,

(3) then select C++ from the list of Configuration Properties for the
    project, modify the "Additional Include Directories" field to
    include the JDK directory on your machine)

NOTE: FastBit requires pthread support, one such library is pthread
      win32 <http://sourceware.org/pthreads-win32/>.  One needs to
      specify the directory containing the header files and the library
      files using similar procedure.  The "Additional Libary
      Directories" that need to be modified is under "Linker" in the
      list of Configuration Properties.


----------
Compiler Macros

There are a number of compiler macros for controlling certain internal
FastBit parameters.  Where you find unexpected troubles with FastBit,
they might come in handy.  Here is a list in the order of potential
usefulness.

WITHOUT_FASTBIT_CONFIG_H

  This macro should be defined if the system can not run the configure
  script in the main directory.  The configure script produces the file
  src/config.h that contains important compiler macros.  When this macro
  is defined, the source code will not attempt to include src/config.h.
  The macros defined in it will take on default values.  This option has
  been mainly tested on MS Windows platform with VisualStudio.  For
  convenience, we have made sure this macro is not necessary under this
  specific environment (MS windows + VisualStudio), all other platforms
  that can not run the configure script, must define this macro!

FILEMANAGER_UNLOAD_TIME

  Defines the amount of time (in seconds) the file manager should wait
  before giving up on waiting when it fails to acquire the desired
  amount of memory.  Presumably, while waiting, other tasks will have
  finished and released the memory being used.  The default time is 600
  seconds in normal operations or 5 seconds if DEBUG is defined.

MIN_DOMAP_SIZE

  FastBit will attempt to use memory map to read large data files if
  mmap and its associated functions are available.  This defines the
  minimal file size (in bytes) before it will attempt to use mmap.

DEBUG

  Turning on DEBUG will enable FastBit to print a lot of diagnostic
  message about its internal operations.  It is useful for debugging
  FastBit internal operations.

WAH_CHECK_SIZE

  Instruct WAH compression function to check the size of the bitmaps
  when they are constructed.  This may be useful if one suspects that
  the WAH compressed bitmap are not what they supposed to be.

ALWAYS_READ_BITVECTOR0

  In an earlier version of FastBit, it always reads the first bitmap of
  every bitmap index regardless of whether it is actually used.  Because
  of this legacy, it is possible there are functions that still rely on
  this old behavior.  If you encounter certain unexpected problems,
  turning this option "on" may resolve them.  Please report such cases
  to fastbit-users@hpcrdm.lbl.gov.

FASTBIT_EXPAND_ALL_TYPES

  The macro FASTBIT_EXPAND_ALL_TYPES controls whether all ten different
  columns will have its own template instance function.  By default,
  with FASTBIT_EXPAND_ALL_TYPES not defined, only five instances are
  generated.  The columns of type BYTE and SHORT are converted to INT
  and passed to the function that handles INT.  The columns of type
  UBYTE and USHORT are converted to UINT.  Similarly, the type ULONG is
  converted LONG and handled as LONG.  The first two convertions may
  only increase run time, but will not affect the correctness of the
  program.  However, the last conversion may cause correctness issues if
  the unsigned 64-bit integers actually have the sign bit set to 1,
  i.e., > 8x2^63 ~ 8x10^18.

FASTBIT_SYNC_WRITE

  If this macro is defined, FastBit will attempt to make sure the files
  opened for write operations synchronize its in-memory content with
  on-disk content before closing the files.  This reduces the likelihood
  of data corruption in case of program crash, but it also makes the
  program waits for disk operations to complete.  The delay can be
  especially painful if there are numerous write operaitons.


----------
Known Issues

(1) Many compilers will issue lots of warnings about potential loss of
    data in various assignments, for example, trying to assign a 32-bit
    integer to a 32-bit floating-point number (type float).  In some
    cases, we have tried to prevent such conversions, but in many cases
    we have left this option open to the users, for example, it is
    possible for a user to retrieve the values of a 32-bit integer
    column as floats by calling ibis::table::getColumnAsFloats.  Callers
    should be aware that such conversion may lose precision.  This type
    of conversion may also occur when comparing two types of columns
    direct (without indexes), for example if a where clause contains "A
    < B" and A is a signed integer but B is a unsigned integer.  Users
    should be aware of such problems.

(2) Under cygwin, some times, the read-write lock may print out warning
    messages, but the operations seem to carry on without any problem.
    We have not tried to figure out what are the causes of the problems,
    if you have information about them or know how to fix the problem,
    we would like to hear about them.

(3) The tests in 'make check' do a very minimal amount of testing.  To
    perform more through testing, use 'make more-check' or 'make
    full-check'.  The tests in 'make more-check' may take ~ 15 min,
    while 'make full-check' may make take several hours.  These longer
    tests write a large number of files into the test directory, which
    defaults to tests/tmp.  It is a good idea to use a local file
    system instead of a remotely mounted file system for test directory.
    To change the test directory use variable TESTDIR, e.g.,

    make TESTDIR=/tmp/kwu/tests full-check

    which will use /tmp/kwu/tests as the test directory.

    Running tests under cygwin takes much longer than on a linux
    machine.  I don't know of any way to speed up the test under cygwin.
    Guess, you basically have to use the native file system on MS
    windows.  Alternatively you may consider MinGW/MinSYS.

(4) The macro LOGGER (defined in util.h) is known to cause gcc 3.3.3 to
    choke up on a SGI Altix system.  It seems to work fine with newer
    versions of gcc or other compilers such Intel's icpc on the same
    system.

(5) Valgrind will complain about FastBit access 4 bytes beyond the end
    of allocated space in some functions of ibis::bitvector.  The
    content of this read operation does no alter the logical of the
    programs (there is a delayed decision to reduce the number of
    if-tests), and the program executes correctly.  If this read
    operation does cause trouble, it would probably cause the OS to
    raise an access violation error.  We have never seen this one
    actually happen and therefore do not know whether it could actually
    happen.  If you do encounter it, please send a stack trace to
    <fastbit-users@hpcrdm.lbl.gov> to help use diagnose the problem.

(6) Certain machines with large memory actually limits the amount of
    memory each process may use.  In such cases, the default cache size
    of half of the physical memory size may be over the limit of the
    memory allowed by the OS.  It is important to coordinate these two
    limits.  More specifically, the memory used by FastBit memory cache
    should be less than the OS limit, otherwise, FastBit program may
    crash due to memory allocation problem.  For example, on
    jacquard.nersc.gov, the maximum virtual memory allowed per process
    is 2GB (for certain class of interactive jobs), but there are 6GB of
    physical memory.  By default, FastBit will attempt to use 3GB of
    memory, which is over the OS assigned memory limit.  In this case,
    adding an RC file with "fileManager.maxBytes=2GB" is needed to
    reduce the memory allowed to FastBit.

(7) Certain linux clusters do not support shared libraries on compute
    nodes, even though shared libraries are supported on the front end.
    In such a case, the configure script will detect shared libraries as
    supported.  Use option --disable-shared to prevent it from trying to
    build the shared library.  (For NERSC users, franklin does not
    support shared libraries on the compute nodes.)

(8) FastBit makes extensive use of STL objects, this causes a problem
    when one wants to build a DLL on a windows machine.  There is at
    least on success story of using STLport to replace the STL from
    visual studio and build DLL successfully, see
    <https://hpcrdm.lbl.gov/pipermail/fastbit-users/2008-June/000127.html>.

(9) The test 10 of check-ibis fails when the PGI compiler is used.
    However, the location of segmentation violation seems to jump
    randomly, making it hard to pingpoint the problem.  As of January
    2009, this problem is only observed under PGI compiler version 8.0.2
    with linux 2.6.18.  If you have any clue as what is going on, please
    send your suggestions or corrections to
    <fastbit-users@hpcrdm.lbl.gov>.

(10) If the configure script finds a working version of javac, but fails
     to find a working version of java, it is likely that CLASSPATH is
     not set correctly.  One common problem on a unix/linux machine is
     that the current directory is not in CLASSPATH.  One way to fix
     such a problem is to prepend the dot in front of CLASSPATH,
     e.g. (in boune shell)

     CLASSPATH=.:$CLASSPATH

(11) If you encounter a "libtool: Version mismatch error," you should be
     able to overwrite the file libtool with a copy from your current
     system, e.g., /usr/bin/libtool.  Alternatively, run the following
     before trying to run configure script again

     aclocal && automake && autoconf

(12) The header file FlexLexer.h in /usr/include directory could be too
     old to work with the files selectLexer.cc and whereLexer.cc.  This
     will cause a compiler error of some sort.  Here is an example:

whereLexer.cc: In member function 'virtual ibis::whereParser::token::yytokentype ibis::whereLexer::lex(ibis::whereParser::semantic_type*, ibis::location*)':
whereLexer.cc:1244: error: 'yywrap' was not declared in this scope

     In this case, explicitly add '-I ${PWD}/win' to CXXFLAGS can force
     the FlexLexer.h in directory win to be included, e.g.,

     make -j 4 CXXFLAGS="-O3 -I ${PWD}/win" all

(13) If you build FastBit Java native interface, make sure --prefix is
     specified at configure command line, otherwise "make install" may
     complain about libfastbitjni.lo can not be installed in any
     directory other than /usr/local/lib (if you have specified --prefix
     but wanted to isntall in a different directory, you might see a
     similar message).  The automatic build script apparently remembers
     the path generated by configure script and does not know how to
     make use of the prefix specified on the command line of make.



----------
Trouble Shooting

When you report problems you encounter, we will use this section for
work-around to the problems that we can solve.

