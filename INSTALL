FastBit is packaged with GNU build tools.  In most cases, this means you
only need to run "./configure; make" to build the library and the
examples.  The following are two set of instructions for customizing
your configuration and building process if you encounters some problems.

On systems where make (or gmake) can support parallel builds, it is safe
to invoke the parallel build options to build the library and the
executables, for example,

gmake -j 3 all

Since it take a while (~ 20 min) to build the libraries, it is a good
idea to spawn multiple jobs to compile them.  However, it is NOT safe to
run the tests in parallel because different jobs may attempt to write
the same files.  The commands 'make quick-check', 'make check', and
'make full-check' must be run as a single job.


----------
Configuration Options

Run './configure --help' to review all options available.  The majority
of the options are standard options available to all GNU build tools.
There are only two additional options
  --enable-debug [extra debugging option]
  --enable-xopt   [extra optimization option]

The default for both is "no", in which case, the library is build with
-O option to g++ compiler.  With --enable-xopt, the optimization flag
-O5 will be used for g++, which may slightly improve the performance of
some query operations, but may also introduce errors due to excessive
compiler "optimization."  In most cases, we suggest that users leave
both of these options at default values.

----------
Compiler Macros

There is a number of compiler macros for controlling certain internal
FastBit parameters.  In cases where you find unexpected troubles with
FastBit, they might come in handy.  Here is a list in the order of
potential usefulness.

FILEMANAGER_UNLOAD_TIME

  Defines the amount of time (in seconds) the file manager should wait
  before giving up on waiting when it fails to acquire the desired
  amount of memory.  Presumably, while waiting, other tasks will have
  finished and released the memory being used.  The default time is 600
  seconds in normal operations or 5 seconds if DEBUG is defined.

MIN_DOMAP_SIZE

  FastBit will attempt to use memory map to read large data files if
  mmap and its associated functions are available.  This defines the
  minimal file size (in bytes) before it will attempt to use mmap.

DEBUG

  Turning on DEBUG will enable FastBit to print a lot of diagnostic
  message about its internal operations.  It is useful for debugging
  FastBit internal operations.

WAH_CHECK_SIZE

  Instruct WAH compression function to check the size of the bitmaps
  when they are constructed.  This may be useful if one suspects that
  the WAH compressed bitmap are not what they supposed to be.

ALWAYS_READ_BITVECTOR0

  In an earlier version of FastBit, it always reads the first bitmap of
  every bitmap index regardless of whether it is actually used.  Because
  of this legacy, it is possible there are functions that still rely on
  this old behavior.  If you encounter certain unexpected problems,
  turning this option "on" may resolve them.  Please report such cases
  to fastbit-users@hpcrdm.lbl.gov.


----------
Known Issues

(1) Many compilers will issue lots of warnings about potential loss of
    data in various assignments, for example, trying to assign a 32-bit
    integer to a 32-bit floating-point number (type float).  In some
    cases, we have tried to prevent such conversions, but in many cases
    we have left this option open to the users, for example, it is
    possible for a user to retrieve the values of a 32-bit integer
    column as floats by calling ibis::table::getColumnAsFloats.  Callers
    should be aware that such conversion may lose data.  This type of
    conversion may also occur when comparing two types of columns direct
    (without indexes), for example if a where clause contains "A < B"
    and A is a signed integer but B is a unsigned integer.  Users should
    be aware of this type of problems.

(2) Under cygwin, some times, the read-write lock may print out error
    messages, but the operations seem to carry on without any problem.
    We have not tried to figure out what are the causes of the problems,
    if you have information about them or know how to fix the problem,
    we would like to hear about it.

(3) It may take a while (~ 15 min) to run the tests especially if the
    build directory is remoted mounted or you are trying it out under
    cygwin.  To avoid using the remoted mounted file system for tests,
    you may specify a location on a local file system to hold the test
    data, e.g.,

    make TESTDIR=/tmp/kwu/tests check

    The target 'quick-test' will take a few seconds, and 'full-check'
    take about five (5) hours on my desktop PC running linux.

    Running tests under cygwin seems to take much longer than on a linux
    machine.  I don't know of any way to speed up the test under cygwin.
    Guess, you basically have to use the native file system on MS
    windows.  If you do anything serious with FastBit, a reasonable
    option is to compile the executables using setup in directory win.
    There is a Makefile file named win/MinGW.mak for compiling under
    MinGW/MinSYS.  If you have a better way than provided there, I would
    like to hear about it.

(2) The macro LOGGER (defined in util.h) is known to cause gcc 3.3.3 to
    choke up on a SGI Altix system.  It seems to work fine with a newer
    version of gcc or another compilers such Intel's icpc on the same
    system.

----------
Trouble Shooting

When you report problems you encounter, we will use this section for
work-around to the problems that we can solve.

