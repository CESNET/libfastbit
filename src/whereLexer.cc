#line 2 "whereLexer.cc"

#line 4 "whereLexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer _whereLexer_FlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *_whereLexer_alloc (yy_size_t  );
void *_whereLexer_realloc (void *,yy_size_t  );
void _whereLexer_free (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 49
#define YY_END_OF_BUFFER 50
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[234] =
    {   0,
        0,    0,   50,   48,   47,   47,    1,   48,   21,   16,
       48,   48,   19,   18,   17,   48,   20,   38,   38,    6,
        9,    8,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   22,   15,    2,   47,    4,    0,   44,
        0,   13,   12,   14,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   23,    0,   38,   38,   38,    0,
       41,   40,    0,    3,    5,   10,    7,    0,   37,   37,
        0,   37,   37,   37,   26,   37,   37,   37,   37,   27,
       37,   11,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   38,   41,   40,   39,    0,   28,   29,
        0,   37,   37,   37,   37,   37,   24,   37,   30,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   42,
        0,    0,    0,   43,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   37,   37,   37,   37,   37,   31,   37,
       25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   37,   37,   37,   37,   32,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   33,   37,   37,   34,    0,    0,

       45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   46,    0,    0,    0,    0,   35,
       37,    0,    0,    0,    0,    0,    0,    0,   36,    0,
        0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   13,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   29,   30,   29,   31,   32,   33,   34,   35,   29,
       29,   36,   37,   38,   39,   29,   40,   41,   42,   29,
       43,   44,   45,   46,   29,    1,   23,   24,   25,   26,

       27,   28,   29,   29,   30,   29,   31,   32,   33,   34,
       35,   29,   29,   36,   37,   38,   39,   29,   40,   41,
       42,   29,    1,   47,    1,   48,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    4,    1,    5,
        1,    6,    7,    8,    8,    1,    9,    9,   10,    1,
        1,    1,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   10,    1,   13,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[272] =
    {   0,
        0,    0,  344, 1158,   47,   49,  319,   48, 1158,   50,
       47,   97,  313,   41,   43,   45, 1158,   49,   55,   47,
      296,  241,   61,   70,   42,   60,   65,   82,   87,   93,
       96,  104,  106, 1158,  207, 1158,  119, 1158,   75, 1158,
        0, 1158, 1158, 1158,   85,    0,  148,   84,  124,  109,
      116,  167,  207,  173, 1158,  120,  127,  140,  156,  179,
      212,  147,    0, 1158, 1158, 1158, 1158,  137,  129,  175,
        0,  164,  147,  134,  178,  184,  186,  190,  191,  189,
      195, 1158,  205,  203,  207,  211,    0,  211,    0,  218,
      243,  269,  250,  225,  263,  286,    0,  272,  289,  133,

      298,    0,  208,  223, 1158,  114,    0,  236,  264,  250,
       97,  266,  276,  288,  289,  290,  291,  294,  296,  225,
      214,  308,  307,  305,  310,  340,  318,  343,  366, 1158,
      379,  360,  385, 1158,  372,  397,  402,  406,  333,  322,
      414,  417,   41,  351, 1158,  399,  409,  407,  307,  404,
      358,  417,  425,  422,  468,  441,  460,  330,  485,  458,
      445,  491,  429,  435,    0,  445,    0,  453,  503,   61,
      507,    0,  510,  453,  500,  486,  493,  422,  507,  501,
      549,  514,  531,  543,  555,    0,  446,  471,  569,  534,
      484,  578,  580,   33,  512,  526,  527,  559,  587,  593,

     1158,  607,  594,  616,  625,  629,  542,  555,  593,  638,
        0,  571,    0,  642, 1158,   49,  651,    0,  647,  570,
      593,  520,  656,  665,  628,  635,  674,   20,  642,  642,
      638,  687, 1158,  717,  730,  742,  747,  759,  772,  785,
      798,  810,  814,  825,  837,  850,  863,  876,  881,  891,
      903,  915,  928,  941,  954,  966,  978,  991, 1003, 1015,
     1019, 1030, 1043, 1056, 1069, 1081, 1093, 1106, 1119, 1131,
     1144
    } ;

static yyconst flex_int16_t yy_def[272] =
    {   0,
      233,    1,  233,  233,  233,  233,  233,  234,  233,  233,
      235,  236,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  233,  233,  233,  233,  233,  234,  233,
      238,  233,  233,  233,  235,  239,  236,  240,  241,  233,
      233,  233,   52,  242,  233,  233,  233,  233,  233,  233,
      233,  233,  243,  233,  233,  233,  233,  233,  237,  237,
      244,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  233,  245,  246,  240,  233,  247,  241,  248,   52,
      233,  233,  233,  233,  233,  233,  249,  233,  250,  233,

      242,  251,  233,  233,  233,  233,  243,  237,  237,  237,
      244,  237,  237,  237,  237,  237,  237,  237,  237,  245,
      246,  252,  253,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  249,  250,  254,  255,
      256,  242,  251,  237,  233,  237,  237,  237,  237,  237,
      237,  252,  253,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  254,  233,  257,  255,  258,  233,  259,  233,
      256,  260,  233,  237,  237,  237,  237,  237,  233,  233,
      233,  233,  233,  233,  233,  261,  262,  263,  259,  264,
      265,  266,  256,  260,  237,  237,  237,  237,  233,  155,

      233,  233,  233,  233,  233,  261,  262,  263,  264,  233,
      267,  265,  268,  233,  233,  233,  266,  269,  233,  237,
      237,  233,  233,  233,  270,  271,  266,  269,  237,  270,
      271,  233,    0,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233
    } ;

static yyconst flex_int16_t yy_nxt[1207] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,    4,
       13,   14,    4,   15,   16,   17,   18,   19,    4,   20,
       21,   22,   23,   24,   25,   26,   27,   26,   26,   28,
       26,   29,   30,   31,   32,   26,   26,   26,   26,   26,
       33,   26,    4,    4,    4,   34,   35,   36,   37,   37,
       37,   37,   40,   42,   40,   68,   43,   56,   56,   56,
       56,   57,   57,   58,  232,   59,   59,   64,   65,   58,
      227,   59,   59,   68,   68,   60,   73,  219,   68,   40,
       61,   60,  193,   68,   71,  173,   61,   62,   86,   63,
       46,   41,   40,   62,   70,   68,   72,   44,   47,   47,

       68,   48,   71,   71,   49,   74,   68,   71,   50,   68,
       50,   51,   71,   52,   53,   75,   76,   68,   41,   68,
       37,   37,   77,   51,   71,   90,   90,   87,   46,   71,
       78,   86,   91,   91,   79,   71,   56,   56,   71,   80,
       81,  145,   68,   57,   57,  106,   71,   68,   71,   47,
       47,   61,   48,   60,  142,   49,   57,   57,  108,   50,
       68,   50,   51,  114,   52,   53,   60,   89,   92,   92,
       58,   71,   59,   59,   98,   98,   71,   68,  106,   92,
      113,   93,   60,   53,   53,   99,  100,   61,   68,   71,
      103,   68,  103,   94,   62,  104,  104,   68,   95,   68,

      109,  112,   68,   68,   68,   96,   71,   97,   68,   40,
       40,   86,   98,   98,  115,  102,  110,   71,   86,  116,
       71,   40,  118,   99,  104,  104,   71,  117,   71,   40,
      119,   71,   71,   71,   90,   90,  127,   71,  127,  104,
      104,  128,  128,  105,   92,   92,   46,  233,   41,  233,
       87,   92,   92,   82,   89,   92,  233,   46,  233,   91,
       91,   67,   92,   68,  129,  129,   91,   91,   41,   94,
       92,   92,  130,   98,   98,  131,   94,   68,  233,   68,
      124,   92,  124,  125,   99,  126,  126,  133,  133,   68,
      138,  138,   71,  139,  132,  134,  140,  144,  135,   98,

       98,   68,   68,   68,   68,  146,   71,   68,   71,   68,
       99,  100,   86,  147,   86,  149,   66,  136,   71,  125,
       68,  126,  126,   55,  148,  151,  154,  154,  150,  164,
       71,   71,   71,   71,  128,  128,   71,  164,   71,   38,
      102,  155,  155,  233,   92,   92,  159,  159,  233,   71,
       89,   87,  155,  233,  156,   92,  126,  126,  233,  128,
      128,  129,  129,  233,   68,  167,  157,  129,  129,  130,
      233,   68,  131,  135,  135,  130,  165,  158,  131,  158,
      131,  131,  159,  159,  135,  174,  133,  133,  160,  161,
      158,  131,  158,   71,  134,  159,  159,  135,  133,  133,

       71,  160,  161,  133,  133,  233,  134,  138,  138,  135,
      139,  134,   68,  140,  135,  168,  168,   68,  233,  233,
       68,   86,   68,  155,  155,  175,  169,  170,  162,  233,
      233,  176,   86,  164,  155,   68,  168,  168,  154,  154,
      178,   71,  155,  155,  177,  233,   71,  169,  157,   71,
      164,   71,  164,  155,  168,  168,  172,  154,  154,  233,
       87,  161,  161,  233,   71,  169,   68,  157,   89,  155,
      155,  182,  165,  182,  161,  161,  183,  183,  164,  179,
      155,  179,  180,  185,  181,  181,  129,  129,  167,  165,
      195,  210,  133,  133,  130,   71,  185,  131,  186,   68,

      134,  159,  159,  135,  189,  189,   68,  190,  168,  168,
      191,   98,   98,   68,  167,  197,  184,  199,  199,  169,
      170,  180,   99,  181,  181,   68,  196,  213,   71,  198,
      183,  183,  155,  155,  233,   71,  223,  223,  210,   68,
       68,  233,   71,  155,  129,  129,  164,  183,  183,  172,
      200,  200,  130,  233,   71,  131,  133,  133,  201,  220,
      221,  155,  164,  202,  134,  181,  181,  135,   71,   71,
      189,  189,   68,  190,  204,  203,  191,  211,  210,  214,
      214,  233,  233,   68,  233,  165,  205,  215,  200,  200,
      169,  216,  233,  233,  200,  200,  201,  210,  167,  155,

      233,   71,  201,  199,  199,  222,   68,  222,  200,  200,
      223,  223,   71,  203,  213,  233,  201,  129,  129,  155,
      218,  233,  233,  199,  199,  130,  133,  133,  131,  229,
      133,  133,  210,  203,  134,   71,  211,  135,  134,  214,
      214,  135,  210,  214,  214,  210,  210,  215,  168,  168,
      169,  215,  214,  214,  169,   68,  224,  200,  200,  169,
      215,  233,  233,  169,  216,  201,  133,  133,  155,  233,
      233,  211,  223,  223,  134,  233,  233,  135,  213,  233,
      233,  213,  233,  233,   71,  211,  233,  233,  214,  214,
      233,  233,  233,  218,  233,  233,  215,  233,  233,  169,

      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   54,   54,   54,  233,   54,  233,   54,
       54,  233,   54,   54,   69,   69,   69,   69,   69,   83,
       83,  233,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   84,   84,  233,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,  101,  101,  233,  233,  233,  101,  101,  101,  101,
      101,  101,  107,  233,  107,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  122,  122,  233,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  123,  123,  233,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  137,
      233,  137,  141,  141,  141,  233,  233,  233,  233,  233,

      233,  141,  141,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  171,  171,  233,
      233,  233,  171,  171,  171,  171,  171,  171,  187,  187,
      233,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  188,  188,  233,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  192,  192,  192,  233,  233,  233,
      233,  233,  233,  192,  192,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  206,  233,  206,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  217,  217,  233,  217,  233,  217,  217,  217,
      217,  217,  217,  225,  225,  233,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  226,  226,  233,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,    3,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233
    } ;

static yyconst flex_int16_t yy_chk[1207] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        6,    6,    8,   10,   11,   25,   10,   14,   14,   15,
       15,   16,   16,   18,  228,   18,   18,   20,   20,   19,
      216,   19,   19,   26,   23,   18,   25,  194,   27,   39,
       18,   19,  170,   24,   25,  143,   19,   18,   48,   18,
       11,    8,   45,   19,   23,   28,   24,   10,   12,   12,

       29,   12,   26,   23,   12,   27,   30,   27,   12,   31,
       12,   12,   24,   12,   12,   28,   29,   32,   39,   33,
       37,   37,   30,   50,   28,   50,   50,   48,   45,   29,
       31,   49,   51,   51,   31,   30,   56,   56,   31,   32,
       33,  111,   69,   57,   57,  106,   32,   74,   33,   47,
       47,   56,   47,   57,  100,   47,   58,   58,   68,   47,
       73,   47,   47,   74,   47,   47,   58,   49,   52,   52,
       59,   69,   59,   59,   54,   54,   74,   72,   62,   52,
       73,   52,   59,   52,   52,   54,   54,   59,   70,   73,
       60,   75,   60,   52,   59,   60,   60,   76,   52,   77,

       70,   72,   80,   78,   79,   52,   72,   52,   81,   83,
       84,   85,   86,   86,   76,   54,   70,   70,   88,   77,
       75,  121,   79,   86,  103,  103,   76,   78,   77,  120,
       81,   80,   78,   79,   90,   90,   94,   81,   94,  104,
      104,   94,   94,   61,   91,   91,   84,   53,   83,  108,
       85,   93,   93,   35,   88,   91,   90,  121,   90,   91,
       91,   22,   93,  110,   95,   95,   93,   93,  120,   91,
       92,   92,   95,   98,   98,   95,   93,  109,  108,  112,
       92,   92,   92,   92,   98,   92,   92,   96,   96,  113,
       99,   99,  110,   99,   95,   96,   99,  109,   96,  101,

      101,  114,  115,  116,  117,  112,  109,  118,  112,  119,
      101,  101,  122,  113,  123,  115,   21,   96,  113,  124,
      149,  124,  124,   13,  114,  118,  125,  125,  116,  140,
      114,  115,  116,  117,  127,  127,  118,  139,  119,    7,
      101,  126,  126,    3,  128,  128,  158,  158,    0,  149,
      123,  122,  126,    0,  126,  128,  126,  126,    0,  128,
      128,  132,  132,    0,  144,  140,  126,  129,  129,  132,
        0,  151,  132,  135,  135,  129,  139,  129,  129,  129,
      131,  131,  129,  129,  135,  144,  133,  133,  135,  135,
      131,  131,  131,  144,  133,  131,  131,  133,  136,  136,

      151,  133,  133,  137,  137,    0,  136,  138,  138,  136,
      138,  137,  146,  138,  137,  141,  141,  150,  142,  142,
      148,  152,  147,  154,  154,  146,  141,  141,  136,  142,
      142,  147,  153,  163,  154,  178,  164,  164,  154,  154,
      150,  146,  156,  156,  148,    0,  150,  164,  154,  148,
      187,  147,  166,  156,  168,  168,  141,  156,  156,  142,
      152,  161,  161,    0,  178,  168,  174,  156,  153,  155,
      155,  157,  163,  157,  160,  160,  157,  157,  188,  155,
      155,  155,  155,  161,  155,  155,  159,  159,  166,  187,
      174,  191,  162,  162,  159,  174,  160,  159,  160,  176,

      162,  159,  159,  162,  169,  169,  177,  169,  171,  171,
      169,  173,  173,  175,  188,  176,  159,  180,  180,  171,
      171,  179,  173,  179,  179,  195,  175,  191,  176,  177,
      182,  182,  183,  183,    0,  177,  222,  222,  190,  196,
      197,    0,  175,  183,  184,  184,  207,  183,  183,  171,
      181,  181,  184,    0,  195,  184,  185,  185,  181,  196,
      197,  181,  208,  181,  185,  181,  181,  185,  196,  197,
      189,  189,  198,  189,  184,  181,  189,  190,  212,  192,
      192,  193,  193,  220,    0,  207,  185,  192,  199,  199,
      192,  192,  193,  193,  200,  200,  199,  209,  208,  199,

        0,  198,  200,  199,  199,  203,  221,  203,  202,  202,
      203,  203,  220,  199,  212,    0,  202,  204,  204,  202,
      192,    0,  193,  202,  202,  204,  205,  205,  204,  221,
      206,  206,  225,  202,  205,  221,  209,  205,  206,  210,
      210,  206,  226,  214,  214,  231,  230,  210,  219,  219,
      210,  214,  217,  217,  214,  229,  205,  223,  223,  219,
      217,    0,    0,  217,  217,  223,  224,  224,  223,    0,
        0,  225,  223,  223,  224,  227,  227,  224,  226,    0,
        0,  231,    0,  227,  229,  230,  227,  227,  232,  232,
        0,    0,    0,  217,    0,    0,  232,    0,    0,  232,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  227,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  236,  236,  236,    0,  236,    0,  236,
      236,    0,  236,  236,  237,  237,  237,  237,  237,  238,
      238,    0,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  239,  239,    0,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  242,  242,    0,    0,    0,  242,  242,  242,  242,
      242,  242,  243,    0,  243,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  247,  247,    0,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  248,  248,    0,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  249,
        0,  249,  250,  250,  250,    0,    0,    0,    0,    0,

        0,  250,  250,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  256,  256,    0,
        0,    0,  256,  256,  256,  256,  256,  256,  257,  257,
        0,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  258,  258,    0,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  259,  259,  259,    0,    0,    0,
        0,    0,    0,  259,  259,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  261,    0,  261,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  266,  266,    0,  266,    0,  266,  266,  266,
      266,  266,  266,  267,  267,    0,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  268,  268,    0,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "whereLexer.ll"
/* $Id$ -*- mode: c++ -*-

   Author: John Wu <John.Wu at acm.org>
   Lawrence Berkeley National Laboratory
   Copyright 2007-2013 the Regents of the University of California
 */
#line 9 "whereLexer.ll"
/** \file Defines the tokenlizer using Flex C++ template. */

#include "whereLexer.h"		// definition of YY_DECL
#include "whereParser.hh"	// class ibis::wherParser

typedef ibis::whereParser::token token;
typedef ibis::whereParser::token_type token_type;

#define yyterminate() return token::END
#define YY_USER_ACTION  yylloc->columns(yyleng);
/* Flex declarations and options */
#define YY_NO_UNISTD_H 1
/*%option noyywrap*/
/*%option case-insensitive*/
/* regular expressions used to shorten the definitions 

the following definition of a name is somehow bad
DIGIT	[0-9]
ALPHA	[_a-zA-Z]
NAME	{ALPHA}((->)?[{DIGIT}{ALPHA}:.]+)*(\[[^\]]+\])?

this version works -- guess I can not use {ALPHA}
NAME	[_a-zA-Z]((->)?[_a-zA-Z0-9.:\[\]]+)*
*/
#line 787 "whereLexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 48 "whereLexer.ll"


    yylloc->step();

		   /* section defining the tokens */
#line 893 "whereLexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 234 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 233 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "whereLexer.ll"
{return token::LEOP;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "whereLexer.ll"
{return token::NEQOP;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "whereLexer.ll"
{return token::NEQOP;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "whereLexer.ll"
{return token::LTOP;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "whereLexer.ll"
{return token::GEOP;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "whereLexer.ll"
{return token::GTOP;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "whereLexer.ll"
{return token::EQOP;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 62 "whereLexer.ll"
{return token::EQOP;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 63 "whereLexer.ll"
{return token::OROP;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 64 "whereLexer.ll"
{return token::ANDOP;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 65 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 66 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 67 "whereLexer.ll"
{return token::BITOROP;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 68 "whereLexer.ll"
{return token::BITANDOP;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 69 "whereLexer.ll"
{return token::MINUSOP;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 70 "whereLexer.ll"
{return token::ADDOP;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 71 "whereLexer.ll"
{return token::MULTOP;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 72 "whereLexer.ll"
{return token::DIVOP;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 73 "whereLexer.ll"
{return token::REMOP;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 74 "whereLexer.ll"
{return token::EXPOP;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 75 "whereLexer.ll"
{return token::EXPOP;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 76 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 77 "whereLexer.ll"
{return token::NULLOP;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 78 "whereLexer.ll"
{return token::INOP;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 79 "whereLexer.ll"
{return token::OROP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 80 "whereLexer.ll"
{return token::ANDOP;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 81 "whereLexer.ll"
{return token::ANYOP;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 82 "whereLexer.ll"
{return token::XOROP;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 83 "whereLexer.ll"
{return token::LIKEOP;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 84 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 85 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 86 "whereLexer.ll"
{return token::EXISTSOP;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 87 "whereLexer.ll"
{return token::BETWEENOP;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 88 "whereLexer.ll"
{return token::CONTAINSOP;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 90 "whereLexer.ll"
{ /* a name, unquoted string */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a name: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::NOUNSTR;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "whereLexer.ll"
{ /* an integer or a floating-point number (without a sign) */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a floating-point number: " << yytext;
#endif
    yylval->doubleVal = atof(yytext);
    return token::NUMBER;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 108 "whereLexer.ll"
{ /* a hexidacimal string */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a hexadecimal integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readUInt(yylval->uint64Val, tmp);
    if (ierr != 0) {
	throw "failed to parse a hexadecimal integer";
    }
    return token::UINT64;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 121 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
	<< __FILE__ << ':' << __LINE__ << " got a unsigned integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readUInt(yylval->uint64Val, tmp);
    if (ierr != 0)
	throw "failed to parse a unsigned integer";
    return token::UINT64;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 133 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
	<< __FILE__ << ':' << __LINE__ << " got a 64-bit integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readInt(yylval->int64Val, tmp);
    if (ierr != 0)
	throw "failed to parse a long integer";
    return token::INT64;
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 145 "whereLexer.ll"
{/*\(\)*/
    /* a series of long integers */ /*  */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a signed integer sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::INTSEQ;
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 155 "whereLexer.ll"
{
    /* a series of unsigned long integers */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a unsigned integer sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::UINTSEQ;
}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 165 "whereLexer.ll"
{ /* a quoted string literal */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a quoted string: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::STRLIT;
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 174 "whereLexer.ll"
{ /* a number series */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a number sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::NUMSEQ;
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 183 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a string sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::STRSEQ;
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 192 "whereLexer.ll"
; /* do nothing for blank space */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 194 "whereLexer.ll"
{ /* pass the character to the parser as a token */
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 198 "whereLexer.ll"
ECHO;
	YY_BREAK
#line 1308 "whereLexer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	_whereLexer_free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	_whereLexer_free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_whereLexer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _whereLexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 234 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 234 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 233);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _whereLexer_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _whereLexer_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_whereLexer_free((void *) b->yy_ch_buf  );

	_whereLexer_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)_whereLexer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)_whereLexer_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) _whereLexer_alloc(new_size  );

		else
			(yy_start_stack) = (int *) _whereLexer_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_whereLexer_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *_whereLexer_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _whereLexer_free (void * ptr )
{
	free( (char *) ptr );	/* see _whereLexer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 198 "whereLexer.ll"


/* additional c++ code to complete the definition of class whereLexer */
ibis::whereLexer::whereLexer(std::istream* in, std::ostream* out)
    : ::_wLexer(in, out) {
#if defined(DEBUG) && DEBUG + 0 > 1
    yy_flex_debug = true;
#endif
}

ibis::whereLexer::~whereLexer() {
}

/* function needed by the super-class of ibis::whereLexer */
#ifdef yylex
#undef yylex
#endif

int ::_wLexer::yylex() {
    return 0;
} // ::_wLexer::yylex

int ::_wLexer::yywrap() {
    return 1;
} // ::_wLexer::yywrap

