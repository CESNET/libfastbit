#line 2 "whereLexer.cc"

#line 4 "whereLexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer _whereLexer_FlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *_whereLexer_alloc (yy_size_t  );
void *_whereLexer_realloc (void *,yy_size_t  );
void _whereLexer_free (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 53
#define YY_END_OF_BUFFER 54
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[296] =
    {   0,
        0,    0,   54,   52,   51,   51,    1,   52,   21,   16,
       52,   52,   19,   18,   17,   52,   20,   42,   42,    6,
        9,    8,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   22,   52,   15,    2,   51,
        4,    0,   48,    0,   13,   12,   14,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   23,    0,
       42,   42,   42,    0,   45,   44,    0,    3,    5,   10,
        7,    0,   41,   41,    0,   41,   41,   41,   41,   26,
       41,   41,   41,   41,   27,   41,   41,    0,    0,   11,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   42,   45,   44,   43,    0,   28,   29,
        0,   41,   41,   41,   41,   41,   41,   24,   41,   41,
       30,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   46,    0,    0,    0,   47,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   41,   41,
       41,   41,   41,   41,   31,   41,   25,   41,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   41,   41,   41,   41,   41,   32,

       41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   33,
       41,   41,   34,   41,   41,    0,    0,   49,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   50,    0,    0,    0,    0,    0,    0,    0,   35,
       41,   41,   41,    0,    0,    0,    0,    0,    0,    0,
        0,   36,   41,   41,    0,    0,    0,    0,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   37,   41,   41,   41,   41,   39,
       41,   38,   41,   40,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   13,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   30,   32,   33,   34,   35,   36,   30,
       30,   37,   38,   39,   40,   30,   41,   42,   43,   30,
       44,   45,   46,   47,   48,   49,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   30,   32,   33,   34,   35,
       36,   30,   30,   37,   38,   39,   40,   30,   41,   42,
       43,   30,    1,   50,    1,   51,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[52] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    4,    1,    5,
        1,    6,    7,    8,    8,    1,    9,    9,   10,    1,
        1,    1,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   10,    1,   13,    1,   12,    4,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[346] =
    {   0,
        0,    0,  299, 1482,   50,   52,  270,   51, 1482,   53,
       50,  103,  276,   44,   46,   48, 1482,   52,   57,   55,
      263,  254,   45,   54,   57,   59,   68,   72,   88,   69,
       93,  100,   85,  105,  111, 1482,   83,  220, 1482,   85,
     1482,  121, 1482,    0, 1482, 1482, 1482,  119,    0,  165,
      126,  127,  128,  116,  213,  216,  148,  130, 1482,  136,
      167,  169,  173,  181,  223,  215,    0, 1482, 1482, 1482,
     1482,  203,  116,  175,    0,  164,  167,  190,  191,  193,
      206,  198,  208,  210,  195,  215,  227,  131,    0, 1482,
      152,  215,  212,  259,    0,  224,    0,  248,  265,  291,

      283,  262,  309,  311,    0,  313,  315,  188,  325,    0,
      228,    0,  141,  227, 1482,  141,    0,  237,  263,  281,
      119,  288,  316,  319,  317,  321,  322,  323,  326,  331,
      329,  289,  244,  333,  341,  339,  335,  359,  377,  364,
      385,  403, 1482,  416,  397,  422, 1482,  409,  434,  439,
      443,  344,  346,  451,  348,  455,  117,  364,  387, 1482,
      429,  436,  446,  449,  394,  456,  447,  452,  463,  369,
      464,  499,  525,  502,  464,  379,  531,  471,  466,  522,
      469,  543,    0,  478,    0,  548,  550,  134,  557,    0,
      502,    0,  560,  522,  540,  551,  543,  552,  463,  554,

      558,  565,  504,  601,  558,  604,  610,  622,    0,  564,
      584,  628,  581,  589,  635,  597,  637,  102,  602,  571,
      627,  630,  613,  632,  638,  651,  656, 1482,  681,  675,
      693,  699,  708,  655,  662,  668,  712,    0,  678,    0,
      714, 1482,  120,  726,    0,  689,    0,  717,  696,  661,
      712,  717,  719,  576,  742,  744,  730,  729,  763,   32,
      734,  724,  739,  753,  744,  735,  783,  743,  748,  757,
      764,  755,  776,  750,  786,  788,  789,  790,  791,  809,
      792,  797,  795,  804,  800,  802,  812,  829,  814,  801,
      836,  805,  838,  841, 1482,  885,  898,  910,  915,  927,

      940,  953,  966,  979,  991, 1003, 1008, 1019, 1031, 1044,
     1057, 1070, 1083, 1088, 1098, 1110, 1122, 1135, 1148, 1161,
     1174, 1187, 1199, 1211, 1224, 1237, 1250, 1262, 1274, 1286,
     1291, 1302, 1315, 1328, 1341, 1353, 1365, 1378, 1391, 1404,
     1417, 1429, 1442, 1455, 1468
    } ;

static yyconst flex_int16_t yy_def[346] =
    {   0,
      295,    1,  295,  295,  295,  295,  295,  296,  295,  295,
      297,  298,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  295,  300,  295,  295,  295,
      295,  296,  295,  301,  295,  295,  295,  297,  302,  298,
      303,  304,  295,  295,  295,   55,  305,  306,  295,  295,
      295,  295,  295,  295,  295,  295,  307,  295,  295,  295,
      295,  295,  299,  299,  308,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  300,  309,  295,
      310,  311,  303,  295,  312,  304,  313,   55,  295,  295,

      295,  295,  295,  295,  314,  295,  315,  295,  305,  316,
      306,  317,  295,  295,  295,  295,  307,  299,  299,  299,
      308,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  318,  310,  311,  319,  320,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  314,
      315,  321,  322,  323,  324,  305,  316,  325,  299,  295,
      299,  299,  299,  299,  299,  299,  299,  299,  318,  319,
      320,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      321,  295,  326,  322,  327,  295,  328,  295,  323,  329,
      324,  330,  295,  325,  299,  299,  299,  299,  299,  299,

      299,  295,  295,  295,  295,  295,  295,  295,  331,  332,
      333,  328,  334,  335,  336,  337,  323,  329,  338,  299,
      299,  299,  299,  299,  299,  295,  173,  295,  295,  295,
      295,  295,  331,  332,  333,  334,  295,  339,  335,  340,
      295,  295,  295,  336,  341,  337,  342,  295,  338,  299,
      299,  299,  299,  295,  295,  295,  343,  344,  336,  341,
      345,  299,  299,  299,  343,  344,  295,  345,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,    0,  295,  295,  295,  295,  295,

      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295
    } ;

static yyconst flex_int16_t yy_nxt[1534] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,    4,
       13,   14,    4,   15,   16,   17,   18,   19,    4,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   26,   26,
       29,   26,   30,   31,   32,   33,   26,   26,   34,   26,
       26,   35,   26,    4,    4,    4,   36,   26,   37,   38,
       39,   40,   40,   40,   40,   43,   45,   43,   72,   46,
       60,   60,   60,   60,   61,   61,   62,   72,   63,   63,
       72,   62,   72,   63,   63,   68,   69,  267,   64,   74,
       76,   72,   72,   64,   65,   72,   40,   40,   75,   65,
       43,   66,   77,   67,   49,   44,   66,   75,   72,   81,

       75,   72,   75,   47,   50,   50,   72,   51,   79,   78,
       52,   75,   75,   72,   53,   75,   53,   54,   72,   55,
       56,   85,   80,   82,   72,   43,   43,   89,   75,   72,
       94,   75,   99,   99,   94,   83,   75,   94,   43,   84,
       86,  259,   54,   75,   98,   98,   87,  248,   75,  106,
      106,   58,   60,   60,   75,  217,   43,  114,  114,   75,
      107,  108,  193,   49,  160,   44,   50,   50,   65,   51,
       95,   97,   52,  116,  112,   89,   53,   72,   53,   54,
       72,   55,   56,   61,   61,   61,   61,   62,   72,   63,
       63,  110,  113,   64,  113,   64,   44,  114,  114,   64,

      119,  123,  122,   72,   72,   65,   72,   75,   72,  156,
       75,   72,   66,   58,  100,  100,   94,  120,   75,   72,
      124,   72,   43,   72,  118,  100,  125,  101,   72,   56,
       56,   94,  127,   75,   75,   94,   75,  126,   75,  102,
       72,   75,  129,  114,  114,  103,  128,  116,   43,   75,
      295,   75,  104,   75,  105,  115,   95,  295,   75,   49,
      106,  106,  130,  131,   98,   98,  100,  100,   97,   90,
       75,  107,  112,  140,   71,  140,   72,  100,  141,  141,
      295,   99,   99,   70,  100,  100,   59,  295,   44,  295,
       41,  102,  100,  100,   72,  100,   43,  159,  295,   99,

       99,   72,  137,  100,  137,  138,   75,  139,  139,  102,
      142,  142,  146,  146,  106,  106,  151,  151,  143,  152,
      147,  144,  153,  148,   75,  107,  106,  106,  161,   72,
       72,   75,   72,   89,   72,   72,   72,  107,  108,   72,
       43,  145,   72,  149,   72,   94,   94,  165,  182,  138,
      164,  139,  139,  182,  162,  182,  163,  295,  167,   75,
       75,  166,   75,  155,   75,   75,   75,  295,  110,   75,
      168,   94,   75,   94,   75,  172,  172,   49,  173,  173,
      141,  141,  295,   97,  295,   95,  100,  100,  183,  173,
      185,  174,  192,  139,  139,  177,  177,  100,  142,  142,

       72,  141,  141,  175,  142,  142,  143,   72,  112,  144,
      148,  148,  143,   95,  176,  144,  176,  144,  144,  177,
      177,  148,  195,  146,  146,  178,  179,  176,  144,  176,
       75,  147,  177,  177,  148,  146,  146,   75,  178,  179,
      146,  146,   72,  147,  151,  151,  148,  152,  147,   72,
      153,  148,  186,  186,  295,  196,  295,  295,  197,   72,
       72,  295,   72,  187,  188,   72,  180,  295,  295,   72,
       43,   94,   75,  182,  295,  205,   72,  205,  295,   75,
      206,  206,  179,  179,  198,  182,  201,  179,  179,   75,
       75,  155,   75,  200,  190,   75,  199,  295,  295,   75,

      173,  173,  224,  173,  173,  208,   75,   89,   97,  182,
      208,  173,  209,  183,  173,  172,  172,  295,  172,  172,
      226,  226,  185,  146,  146,  175,  173,  173,  175,   94,
      295,  147,  142,  142,  148,  295,  202,  173,  202,  203,
      143,  204,  204,  144,  186,  186,  192,  177,  177,  186,
      186,  212,  212,   72,  213,  187,   72,  214,  186,  186,
      187,  106,  106,  207,   72,   72,  112,   72,  182,  187,
      188,   72,  107,  222,  206,  206,  295,  221,  220,  203,
      295,  204,  204,   75,   72,  237,   75,  295,  225,  223,
      295,  182,  255,  255,   75,   75,  237,   75,  216,  295,

      190,   75,  227,  227,  237,  173,  173,  295,  183,  182,
      228,  142,  142,  173,   75,  229,  173,  204,  204,  143,
      206,  206,  144,  146,  146,  238,   72,  230,  185,  212,
      212,  147,  213,  240,  148,  214,  241,  241,  295,  295,
       72,  247,  231,   72,  242,   72,  192,  187,  243,  295,
      295,   72,  227,  227,  232,  295,   75,  227,  227,  182,
      228,  250,  295,  173,  251,  228,  252,  226,  226,  182,
       75,  295,  237,   75,   72,   75,  216,  230,  245,  253,
      295,   75,  227,  227,  295,  237,  254,  295,  254,  295,
      228,  255,  255,  173,  142,  142,  237,  226,  226,  183,

      146,  146,  143,  182,   75,  144,  185,  230,  147,  146,
      146,  148,  238,  241,  241,  241,  241,  147,  186,  186,
      148,  242,  240,  242,  187,   72,  187,  241,  241,  187,
       72,  256,   72,  247,  237,  242,  237,   72,  187,  243,
      192,  237,  237,  227,  227,  146,  146,  263,  237,  262,
      237,  228,   72,  147,  173,   75,  148,  264,  255,  255,
       75,   72,   75,   72,  295,  295,   72,   75,   72,  245,
       72,  295,  295,  240,  238,  295,  295,   72,  247,  240,
      269,  274,   75,  270,  241,  241,  271,  247,  238,   72,
      272,   75,  242,   75,  273,  187,   75,  276,   75,   72,

       75,   72,   72,   72,   72,   72,  295,   75,   72,  275,
       72,  295,  277,   72,   72,   72,  278,   72,   72,   75,
      279,  286,   72,  281,  289,   72,  282,   72,  287,   75,
      285,   75,   75,   75,   75,   75,  280,  283,   75,  288,
       75,  284,   72,   75,   75,   75,  292,   75,   75,   72,
      290,   72,   75,  291,   72,   75,  295,   75,  293,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      294,  295,   75,  295,  295,  295,  295,  295,  295,   75,
      295,   75,  295,  295,   75,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   48,   48,

       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   57,   57,   57,  295,   57,  295,   57,   57,  295,
       57,   57,   73,   73,   73,   73,   73,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       91,   91,  295,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   92,   92,  295,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,  109,  109,  295,  295,  295,  109,  109,  109,

      109,  109,  109,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  117,  295,  117,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  132,  132,  295,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      135,  135,  295,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  136,  136,  295,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  150,  295,  150,  154,

      154,  154,  295,  295,  295,  295,  295,  295,  154,  154,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  158,  158,  295,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,

      189,  189,  295,  295,  295,  189,  189,  189,  189,  189,
      189,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  210,  210,  295,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      211,  211,  295,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  215,  215,  215,  295,  295,  295,  295,
      295,  295,  215,  215,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  219,  219,  295,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  233,

      295,  233,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  244,  244,  295,  244,  295,  244,
      244,  244,  244,  244,  244,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  257,  257,  295,  257,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  258,  258,  295,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  261,
      261,  295,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,    3,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,

      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295
    } ;

static yyconst flex_int16_t yy_chk[1534] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    5,    6,    6,    8,   10,   11,   23,   10,
       14,   14,   15,   15,   16,   16,   18,   24,   18,   18,
       25,   19,   26,   19,   19,   20,   20,  260,   18,   23,
       24,   27,   30,   19,   18,   28,   40,   40,   23,   19,
       37,   18,   25,   18,   11,    8,   19,   24,   33,   30,

       25,   29,   26,   10,   12,   12,   31,   12,   28,   27,
       12,   27,   30,   32,   12,   28,   12,   12,   34,   12,
       12,   33,   29,   31,   35,   42,   48,   37,   33,   73,
       51,   29,   54,   54,   52,   32,   31,   58,   88,   32,
       34,  243,   53,   32,   53,   53,   35,  218,   34,   57,
       57,   12,   60,   60,   35,  188,   91,  113,  113,   73,
       57,   57,  157,   48,  121,   42,   50,   50,   60,   50,
       51,   52,   50,  116,   58,   88,   50,   76,   50,   50,
       77,   50,   50,   61,   61,   62,   62,   63,   74,   63,
       63,   57,   64,   61,   64,   62,   91,   64,   64,   63,

       74,   77,   76,   78,   79,   63,   80,   76,   85,  108,
       77,   82,   63,   50,   55,   55,   93,   74,   74,   81,
       78,   83,   92,   84,   72,   55,   79,   55,   86,   55,
       55,   96,   82,   78,   79,  111,   80,   81,   85,   55,
       87,   82,   84,  114,  114,   55,   83,   66,  133,   81,
      118,   83,   55,   84,   55,   65,   93,   56,   86,   92,
       94,   94,   86,   87,   98,   98,   99,   99,   96,   38,
       87,   94,  111,  102,   22,  102,  119,   99,  102,  102,
      118,   99,   99,   21,  101,  101,   13,   98,  133,   98,
        7,   99,  100,  100,  120,  101,  132,  119,    3,  101,

      101,  122,  100,  100,  100,  100,  119,  100,  100,  101,
      103,  103,  104,  104,  106,  106,  107,  107,  103,  107,
      104,  103,  107,  104,  120,  106,  109,  109,  122,  123,
      125,  122,  124,  132,  126,  127,  128,  109,  109,  129,
      134,  103,  131,  104,  130,  135,  136,  126,  152,  137,
      125,  137,  137,  153,  123,  155,  124,    0,  129,  123,
      125,  127,  124,  107,  126,  127,  128,    0,  109,  129,
      130,  158,  131,  170,  130,  138,  138,  134,  139,  139,
      140,  140,    0,  136,    0,  135,  141,  141,  152,  139,
      153,  139,  155,  139,  139,  176,  176,  141,  145,  145,

      159,  141,  141,  139,  142,  142,  145,  165,  158,  145,
      148,  148,  142,  170,  142,  142,  142,  144,  144,  142,
      142,  148,  159,  146,  146,  148,  148,  144,  144,  144,
      159,  146,  144,  144,  146,  149,  149,  165,  146,  146,
      150,  150,  161,  149,  151,  151,  149,  151,  150,  162,
      151,  150,  154,  154,    0,  161,  156,  156,  162,  163,
      167,    0,  164,  154,  154,  168,  149,  156,  156,  166,
      169,  171,  161,  181,    0,  175,  199,  175,    0,  162,
      175,  175,  179,  179,  163,  184,  168,  178,  178,  163,
      167,  151,  164,  166,  154,  168,  164,    0,  156,  166,

      172,  172,  199,  174,  174,  179,  199,  169,  171,  191,
      178,  172,  178,  181,  174,  172,  172,    0,  174,  174,
      203,  203,  184,  180,  180,  172,  173,  173,  174,  194,
        0,  180,  177,  177,  180,    0,  173,  173,  173,  173,
      177,  173,  173,  177,  182,  182,  191,  177,  177,  186,
      186,  187,  187,  195,  187,  182,  197,  187,  189,  189,
      186,  193,  193,  177,  196,  198,  194,  200,  210,  189,
      189,  201,  193,  197,  205,  205,    0,  196,  195,  202,
        0,  202,  202,  195,  220,  213,  197,    0,  201,  198,
        0,  211,  254,  254,  196,  198,  214,  200,  187,    0,

      189,  201,  204,  204,  216,  206,  206,    0,  210,  219,
      204,  207,  207,  204,  220,  204,  206,  204,  204,  207,
      206,  206,  207,  208,  208,  213,  223,  204,  211,  212,
      212,  208,  212,  214,  208,  212,  215,  215,  217,  217,
      221,  216,  207,  222,  215,  224,  219,  215,  215,  217,
      217,  225,  226,  226,  208,    0,  223,  227,  227,  234,
      226,  221,    0,  226,  222,  227,  224,  226,  226,  235,
      221,    0,  236,  222,  250,  224,  212,  226,  215,  225,
      217,  225,  229,  229,    0,  239,  230,    0,  230,    0,
      229,  230,  230,  229,  231,  231,  246,  229,  229,  234,

      232,  232,  231,  249,  250,  231,  235,  229,  232,  233,
      233,  232,  236,  237,  237,  241,  241,  233,  248,  248,
      233,  237,  239,  241,  237,  251,  241,  244,  244,  248,
      252,  232,  253,  246,  257,  244,  258,  262,  244,  244,
      249,  261,  266,  255,  255,  256,  256,  252,  265,  251,
      268,  255,  263,  256,  255,  251,  256,  253,  255,  255,
      252,  269,  253,  274,  259,  259,  264,  262,  272,  244,
      270,    0,  259,  258,  257,  259,  259,  271,  261,  266,
      263,  272,  263,  264,  267,  267,  269,  268,  265,  273,
      270,  269,  267,  274,  271,  267,  264,  274,  272,  275,

      270,  276,  277,  278,  279,  281,  259,  271,  283,  273,
      282,    0,  275,  285,  290,  286,  276,  284,  292,  273,
      276,  282,  280,  278,  286,  287,  279,  289,  283,  275,
      281,  276,  277,  278,  279,  281,  277,  280,  283,  284,
      282,  280,  288,  285,  290,  286,  289,  284,  292,  291,
      287,  293,  280,  288,  294,  287,    0,  289,  291,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      293,    0,  288,    0,    0,    0,    0,    0,    0,  291,
        0,  293,    0,    0,  294,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  297,  297,

      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  298,  298,  298,    0,  298,    0,  298,  298,    0,
      298,  298,  299,  299,  299,  299,  299,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      301,  301,    0,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  302,  302,    0,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  305,  305,    0,    0,    0,  305,  305,  305,

      305,  305,  305,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  307,    0,  307,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  309,  309,    0,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      312,  312,    0,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  313,  313,    0,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  314,    0,  314,  315,

      315,  315,    0,    0,    0,    0,    0,    0,  315,  315,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  317,  317,    0,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      323,  323,    0,    0,    0,  323,  323,  323,  323,  323,
      323,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  326,  326,    0,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      327,  327,    0,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  328,  328,  328,    0,    0,    0,    0,
        0,    0,  328,  328,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  330,  330,    0,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  331,

        0,  331,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  336,  336,    0,  336,    0,  336,
      336,  336,  336,  336,  336,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  339,  339,    0,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  339,  340,  340,    0,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  342,
      342,    0,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,

      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "whereLexer.ll"
/* $Id$ -*- mode: c++ -*-

   Author: John Wu <John.Wu at acm.org>
   Lawrence Berkeley National Laboratory
   Copyright 2007-2014 the Regents of the University of California
 */
#line 9 "whereLexer.ll"
/** \file Defines the tokenlizer using Flex C++ template. */

#include "whereLexer.h"		// definition of YY_DECL
#include "whereParser.hh"	// class ibis::wherParser

typedef ibis::whereParser::token token;
typedef ibis::whereParser::token_type token_type;

#define yyterminate() return token::END
#define YY_USER_ACTION  yylloc->columns(yyleng);
/* Flex declarations and options */
#define YY_NO_UNISTD_H 1
/*%option noyywrap*/
/*%option case-insensitive*/
/* regular expressions used to shorten the definitions 

the following definition of a name is somehow bad
DIGIT	[0-9]
ALPHA	[_a-zA-Z]
NAME	{ALPHA}((->)?[{DIGIT}{ALPHA}:.]+)*(\[[^\]]+\])?

this version works -- guess I can not use {ALPHA}
NAME	[_a-zA-Z]((->)?[_a-zA-Z0-9.:\[\]]+)*
*/
#line 883 "whereLexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 48 "whereLexer.ll"


    yylloc->step();

		   /* section defining the tokens */
#line 989 "whereLexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 296 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 295 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "whereLexer.ll"
{return token::LEOP;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "whereLexer.ll"
{return token::NEQOP;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "whereLexer.ll"
{return token::NEQOP;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "whereLexer.ll"
{return token::LTOP;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "whereLexer.ll"
{return token::GEOP;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "whereLexer.ll"
{return token::GTOP;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "whereLexer.ll"
{return token::EQOP;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 62 "whereLexer.ll"
{return token::EQOP;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 63 "whereLexer.ll"
{return token::OROP;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 64 "whereLexer.ll"
{return token::ANDOP;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 65 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 66 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 67 "whereLexer.ll"
{return token::BITOROP;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 68 "whereLexer.ll"
{return token::BITANDOP;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 69 "whereLexer.ll"
{return token::MINUSOP;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 70 "whereLexer.ll"
{return token::ADDOP;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 71 "whereLexer.ll"
{return token::MULTOP;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 72 "whereLexer.ll"
{return token::DIVOP;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 73 "whereLexer.ll"
{return token::REMOP;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 74 "whereLexer.ll"
{return token::EXPOP;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 75 "whereLexer.ll"
{return token::EXPOP;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 76 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 77 "whereLexer.ll"
{return token::NULLOP;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 78 "whereLexer.ll"
{return token::INOP;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 79 "whereLexer.ll"
{return token::OROP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 80 "whereLexer.ll"
{return token::ANDOP;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 81 "whereLexer.ll"
{return token::ANYOP;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 82 "whereLexer.ll"
{return token::XOROP;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 83 "whereLexer.ll"
{return token::LIKEOP;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 84 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 85 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 86 "whereLexer.ll"
{return token::EXISTSOP;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 87 "whereLexer.ll"
{return token::BETWEENOP;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 88 "whereLexer.ll"
{return token::CONTAINSOP;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 89 "whereLexer.ll"
{return token::TO_UNIXTIME_GMT;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 90 "whereLexer.ll"
{return token::TO_UNIXTIME_LOCAL;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 91 "whereLexer.ll"
{return token::FROM_UNIXTIME_GMT;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 92 "whereLexer.ll"
{return token::FROM_UNIXTIME_LOCAL;}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 94 "whereLexer.ll"
{ /* a name, unquoted string */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a name: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::NOUNSTR;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "whereLexer.ll"
{ /* an integer or a floating-point number (without a sign) */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a floating-point number: " << yytext;
#endif
    yylval->doubleVal = atof(yytext);
    return token::NUMBER;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 112 "whereLexer.ll"
{ /* a hexidacimal string */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a hexadecimal integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readUInt(yylval->uint64Val, tmp);
    if (ierr != 0) {
	throw "failed to parse a hexadecimal integer";
    }
    return token::UINT64;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 125 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
	<< __FILE__ << ':' << __LINE__ << " got a unsigned integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readUInt(yylval->uint64Val, tmp);
    if (ierr != 0)
	throw "failed to parse a unsigned integer";
    return token::UINT64;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 137 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
	<< __FILE__ << ':' << __LINE__ << " got a 64-bit integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readInt(yylval->int64Val, tmp);
    if (ierr != 0)
	throw "failed to parse a long integer";
    return token::INT64;
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 149 "whereLexer.ll"
{/*\(\)*/
    /* a series of long integers */ /*  */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a signed integer sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::INTSEQ;
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 159 "whereLexer.ll"
{
    /* a series of unsigned long integers */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a unsigned integer sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::UINTSEQ;
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 169 "whereLexer.ll"
{ /* a quoted string literal */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a quoted string: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::STRLIT;
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 178 "whereLexer.ll"
{ /* a number series */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a number sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::NUMSEQ;
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 187 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a string sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::STRSEQ;
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 196 "whereLexer.ll"
; /* do nothing for blank space */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 198 "whereLexer.ll"
{ /* pass the character to the parser as a token */
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 202 "whereLexer.ll"
ECHO;
	YY_BREAK
#line 1424 "whereLexer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	_whereLexer_free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	_whereLexer_free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_whereLexer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _whereLexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 296 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 296 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 295);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _whereLexer_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _whereLexer_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_whereLexer_free((void *) b->yy_ch_buf  );

	_whereLexer_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)_whereLexer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)_whereLexer_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) _whereLexer_alloc(new_size  );

		else
			(yy_start_stack) = (int *) _whereLexer_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_whereLexer_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *_whereLexer_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _whereLexer_free (void * ptr )
{
	free( (char *) ptr );	/* see _whereLexer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 202 "whereLexer.ll"


/* additional c++ code to complete the definition of class whereLexer */
ibis::whereLexer::whereLexer(std::istream* in, std::ostream* out)
    : ::_wLexer(in, out) {
#if defined(DEBUG) && DEBUG + 0 > 1
    yy_flex_debug = true;
#endif
}

ibis::whereLexer::~whereLexer() {
}

/* function needed by the super-class of ibis::whereLexer */
#ifdef yylex
#undef yylex
#endif

int ::_wLexer::yylex() {
    return 0;
} // ::_wLexer::yylex

int ::_wLexer::yywrap() {
    return 1;
} // ::_wLexer::yywrap

