#line 2 "whereLexer.cc"

#line 4 "whereLexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer _whereLexer_FlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *_whereLexer_alloc (yy_size_t  );
void *_whereLexer_realloc (void *,yy_size_t  );
void _whereLexer_free (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 48
#define YY_END_OF_BUFFER 49
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[228] =
    {   0,
        0,    0,   49,   47,   46,   46,    1,   47,   21,   16,
       47,   47,   19,   18,   17,   47,   20,   37,   37,    6,
        9,    8,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   22,   15,    2,   46,    4,    0,   43,    0,
       13,   12,   14,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   23,    0,   37,   37,   37,    0,   40,
       39,    0,    3,    5,   10,    7,    0,   36,   36,    0,
       36,   36,   26,   36,   36,   36,   36,   27,   36,   11,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   37,   40,   39,   38,    0,   28,   29,    0,   36,
       36,   36,   36,   24,   36,   30,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   41,    0,    0,    0,
       42,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       36,   36,   36,   36,   31,   36,   25,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
       36,   36,   32,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   33,
       36,   36,    0,    0,   44,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   45,    0,
        0,    0,    0,   34,   36,    0,    0,    0,    0,    0,
        0,    0,   35,    0,    0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   13,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   29,   30,   29,   31,   32,   33,   34,   35,   29,
       29,   36,   37,   38,   39,   29,   40,   41,   42,   29,
       43,   44,   45,   46,   29,    1,   23,   24,   25,   26,

       27,   28,   29,   29,   30,   29,   31,   32,   33,   34,
       35,   29,   29,   36,   37,   38,   39,   29,   40,   41,
       42,   29,    1,   47,    1,   48,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    4,    1,    5,
        1,    6,    7,    8,    8,    1,    9,    9,   10,    1,
        1,    1,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   10,    1,   13,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[266] =
    {   0,
        0,    0,  349, 1139,   47,   49,  325,   48, 1139,   50,
       47,   97,  330,   41,   43,   45, 1139,   49,   55,   47,
      313,  311,   61,   70,   42,   60,   82,   87,   92,   93,
      104,   94, 1139,  281, 1139,   76, 1139,   66, 1139,    0,
     1139, 1139, 1139,   75,    0,  146,  115,  113,  109,  116,
      163,  282,  139, 1139,  138,  150,  156,  169,  180,  231,
      215,    0, 1139, 1139, 1139, 1139,  221,  129,  174,    0,
      171,  177,  132,  175,  179,  185,  189,  136,  191, 1139,
      118,  163,  205,  222,    0,  204,    0,  212,  237,  263,
      243,  219,  269,  281,    0,  239,  284,  197,  255,    0,

      121,  127, 1139,  137,    0,  201,  259,  224,   86,  245,
      276,  281,  260,  282,  283,  286,  299,  218,  300,  298,
      292,  294,  318,  299,  335,  352, 1139,  365,  337,  371,
     1139,  358,  383,  388,  392,  313,  314,  400,  403,   48,
      316, 1139,  385,  349,  313,  390,  366,  382,  400,  418,
      445,  437,  420,  393,  463,  412,  450,  439,  417,  469,
        0,  448,    0,  472,  485,   67,  494,    0,  481,  463,
      472,  484,  477,  485,  401,  536,  406,  508,  520,  532,
        0,  465,  461,  553,  473,  496,  557,  563,   41,  498,
      514,  548,  570,  576, 1139,  591,  578,  600,  609,  613,

      474,  524,  531,  618,    0,  561,    0,  622, 1139,   58,
      634,    0,  627,  571,  613,  526,  636,  649,  545,  573,
      655,   20,  620,  628,  599,  668, 1139,  698,  711,  723,
      728,  740,  753,  766,  779,  791,  795,  806,  818,  831,
      844,  857,  862,  872,  884,  896,  909,  922,  935,  947,
      959,  972,  984,  996, 1000, 1011, 1024, 1037, 1050, 1062,
     1074, 1087, 1100, 1112, 1125
    } ;

static yyconst flex_int16_t yy_def[266] =
    {   0,
      227,    1,  227,  227,  227,  227,  227,  228,  227,  227,
      229,  230,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  227,  227,  227,  227,  227,  228,  227,  232,
      227,  227,  227,  229,  233,  230,  234,  235,  227,  227,
      227,   51,  236,  227,  227,  227,  227,  227,  227,  227,
      227,  237,  227,  227,  227,  227,  227,  231,  231,  238,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  227,
      239,  240,  234,  227,  241,  235,  242,   51,  227,  227,
      227,  227,  227,  227,  243,  227,  244,  227,  236,  245,

      227,  227,  227,  227,  237,  231,  231,  231,  238,  231,
      231,  231,  231,  231,  231,  231,  239,  240,  246,  247,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  243,  244,  248,  249,  250,  236,  245,
      231,  227,  231,  231,  231,  231,  231,  246,  247,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  248,  227,
      251,  249,  252,  227,  253,  227,  250,  254,  227,  231,
      231,  231,  231,  227,  227,  227,  227,  227,  227,  227,
      255,  256,  257,  253,  258,  259,  260,  250,  254,  231,
      231,  231,  227,  151,  227,  227,  227,  227,  227,  255,

      256,  257,  258,  227,  261,  259,  262,  227,  227,  227,
      260,  263,  227,  231,  231,  227,  227,  227,  264,  265,
      260,  263,  231,  264,  265,  227,    0,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227
    } ;

static yyconst flex_int16_t yy_nxt[1188] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,    4,
       13,   14,    4,   15,   16,   17,   18,   19,    4,   20,
       21,   22,   23,   24,   25,   26,   26,   26,   26,   27,
       26,   28,   29,   30,   31,   26,   26,   26,   26,   26,
       32,   26,    4,    4,    4,   33,   34,   35,   36,   36,
       36,   36,   39,   41,   39,   67,   42,   55,   55,   55,
       55,   56,   56,   57,  226,   58,   58,   63,   64,   57,
       39,   58,   58,   67,   67,   59,   72,   36,   36,  221,
       60,   59,   39,   67,   70,  213,   60,   61,  188,   62,
       45,   40,  169,   61,   69,   67,   71,   43,   46,   46,

       67,   47,   70,   70,   48,   67,   67,   67,   49,   40,
       49,   50,   70,   51,   52,   73,   74,   67,   45,   84,
       84,   75,   39,   50,   70,   88,   88,   76,   79,   70,
      142,   77,   89,   89,   70,   70,   70,  102,  102,   78,
       96,   96,   67,  102,  102,   67,   70,   46,   46,   67,
       47,   97,   98,   48,   55,   55,   87,   49,   85,   49,
       50,   40,   51,   52,   90,   90,   56,   56,  104,   60,
       39,   70,   56,   56,   70,   90,   59,   91,   70,   52,
       52,  100,   59,   57,   67,   58,   58,   67,   67,   92,
       67,  101,   67,  101,   93,   59,  102,  102,   67,  107,

       60,   94,   67,   95,   67,  112,   45,   61,  110,   84,
      111,   84,  113,   70,  227,  108,   70,   70,  139,   70,
      115,   70,  114,   96,   96,   39,  116,   70,   88,   88,
      124,   70,  124,   70,   97,  125,  125,   67,   90,   90,
       96,   96,  106,  227,   90,   90,  104,   87,   85,   90,
      227,   97,  227,   89,   89,   90,   96,   96,   67,   89,
       89,   45,  103,   92,   90,   90,   70,   97,   98,   92,
      126,  126,   67,   67,  121,   90,  121,  122,  127,  123,
      123,  128,  130,  130,  143,  135,  135,   70,  136,   67,
      131,  137,  141,  132,   67,   67,   67,  100,  146,   67,

      129,   70,   70,   39,   84,   84,  122,  145,  123,  123,
      150,  150,  133,  144,  147,  125,  125,  160,   70,  151,
      151,  160,  227,   70,   70,   70,   67,   80,   70,   67,
      151,   66,  152,   65,  123,  123,   90,   90,  126,  126,
       54,   87,   40,   85,  153,   37,  127,   90,  227,  128,
      170,  125,  125,  126,  126,   70,  161,  163,   70,  132,
      132,  127,   67,  154,  128,  154,  128,  128,  155,  155,
      132,  172,  130,  130,  156,  157,  154,  128,  154,   67,
      131,  155,  155,  132,  130,  130,   84,  156,  157,  130,
      130,   70,  131,  135,  135,  132,  136,  131,   67,  137,

      132,  164,  164,   67,  227,  227,  227,   84,   70,  155,
      155,  171,  165,  166,  158,  227,  227,  193,  193,  151,
      151,  160,  178,  178,  227,   85,  173,   70,  157,  157,
      151,  177,   70,  177,  150,  150,  178,  178,  151,  151,
      130,  130,  168,   87,  153,  227,  151,  151,  131,  151,
      180,  132,  181,  150,  150,  160,  174,  151,  174,  175,
      161,  176,  176,  153,  126,  126,  157,  157,  160,  160,
      164,  164,  127,  164,  164,  128,   67,  204,  160,  155,
      155,  165,   96,   96,  165,   67,  184,  184,  180,  185,
       67,  163,  186,   97,  179,  164,  164,   67,  191,  175,

      190,  176,  176,  204,  163,   70,  165,  166,  161,  151,
      151,   67,  227,  192,   70,  227,  205,  161,  227,   70,
      151,  126,  126,  227,  178,  178,   70,   67,  227,  127,
      227,  160,  128,  130,  130,  204,  168,  194,  194,  207,
       70,  131,  217,  217,  132,  195,  227,  214,  151,  204,
      196,  198,  176,  176,  184,  184,   70,  185,  208,  208,
      186,   67,  197,  199,  227,  227,  209,  163,  204,  165,
      210,  194,  194,  227,  205,  227,  227,  194,  194,  195,
      204,  215,  151,  227,   67,  195,  193,  193,  205,  216,
       70,  216,  194,  194,  217,  217,  197,  227,  227,  212,

      195,  126,  126,  151,  207,  227,  204,  193,  193,  127,
      130,  130,  128,   70,  130,  130,  207,  197,  131,  208,
      208,  132,  131,  208,  208,  132,   67,  209,  164,  164,
      165,  209,  204,   67,  165,  208,  208,  194,  194,  165,
      218,  227,  207,  209,  227,  195,  165,  210,  151,  223,
      130,  130,  217,  217,  227,   70,  227,  227,  131,  227,
      227,  132,   70,  227,  227,  227,  227,  227,  227,  208,
      208,  205,  227,  227,  227,  227,  212,  209,  227,  227,
      165,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,   38,   38,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   53,   53,   53,  227,   53,  227,
       53,   53,  227,   53,   53,   68,   68,   68,   68,   68,
       81,   81,  227,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   82,   82,  227,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   99,   99,  227,  227,  227,   99,   99,   99,

       99,   99,   99,  105,  227,  105,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  119,  119,  227,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  120,  120,  227,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      134,  227,  134,  138,  138,  138,  227,  227,  227,  227,
      227,  227,  138,  138,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  148,  148,  148,  148,

      148,  148,  148,  148,  148,  148,  148,  148,  148,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  167,  167,
      227,  227,  227,  167,  167,  167,  167,  167,  167,  182,
      182,  227,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  183,  183,  227,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  187,  187,  187,  227,  227,
      227,  227,  227,  227,  187,  187,  189,  189,  189,  189,

      189,  189,  189,  189,  189,  189,  189,  189,  200,  227,
      200,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  211,  211,  227,  211,  227,  211,  211,
      211,  211,  211,  211,  219,  219,  227,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  220,  220,  227,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,    3,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227
    } ;

static yyconst flex_int16_t yy_chk[1188] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        6,    6,    8,   10,   11,   25,   10,   14,   14,   15,
       15,   16,   16,   18,  222,   18,   18,   20,   20,   19,
       38,   19,   19,   26,   23,   18,   25,   36,   36,  210,
       18,   19,   44,   24,   25,  189,   19,   18,  166,   18,
       11,    8,  140,   19,   23,   27,   24,   10,   12,   12,

       28,   12,   26,   23,   12,   29,   30,   32,   12,   38,
       12,   12,   24,   12,   12,   27,   28,   31,   44,   47,
       48,   29,   81,   49,   27,   49,   49,   30,   32,   28,
      109,   30,   50,   50,   29,   30,   32,  101,  101,   31,
       53,   53,   68,  102,  102,   73,   31,   46,   46,   78,
       46,   53,   53,   46,   55,   55,   48,   46,   47,   46,
       46,   81,   46,   46,   51,   51,   56,   56,  104,   55,
       82,   68,   57,   57,   73,   51,   56,   51,   78,   51,
       51,   53,   57,   58,   71,   58,   58,   69,   74,   51,
       72,   59,   75,   59,   51,   58,   59,   59,   76,   69,

       58,   51,   77,   51,   79,   74,   82,   58,   71,   83,
       72,   86,   75,   71,  106,   69,   69,   74,   98,   72,
       77,   75,   76,   84,   84,  118,   79,   76,   88,   88,
       92,   77,   92,   79,   84,   92,   92,  108,   89,   89,
       96,   96,   67,  106,   91,   91,   61,   86,   83,   89,
       88,   96,   88,   89,   89,   91,   99,   99,  110,   91,
       91,  118,   60,   89,   90,   90,  108,   99,   99,   91,
       93,   93,  107,  113,   90,   90,   90,   90,   93,   90,
       90,   93,   94,   94,  110,   97,   97,  110,   97,  111,
       94,   97,  107,   94,  112,  114,  115,   99,  113,  116,

       93,  107,  113,  117,  119,  120,  121,  112,  121,  121,
      122,  122,   94,  111,  115,  124,  124,  136,  111,  123,
      123,  137,   52,  112,  114,  115,  145,   34,  116,  141,
      123,   22,  123,   21,  123,  123,  125,  125,  129,  129,
       13,  120,  117,  119,  123,    7,  129,  125,    3,  129,
      141,  125,  125,  126,  126,  145,  136,  137,  141,  132,
      132,  126,  144,  126,  126,  126,  128,  128,  126,  126,
      132,  144,  130,  130,  132,  132,  128,  128,  128,  147,
      130,  128,  128,  130,  133,  133,  148,  130,  130,  134,
      134,  144,  133,  135,  135,  133,  135,  134,  143,  135,

      134,  138,  138,  146,  139,  139,    0,  149,  147,  154,
      154,  143,  138,  138,  133,  139,  139,  175,  175,  150,
      150,  159,  177,  177,    0,  148,  146,  143,  156,  156,
      150,  153,  146,  153,  150,  150,  153,  153,  152,  152,
      158,  158,  138,  149,  150,  139,  151,  151,  158,  152,
      156,  158,  156,  152,  152,  162,  151,  151,  151,  151,
      159,  151,  151,  152,  155,  155,  157,  157,  183,  182,
      160,  160,  155,  164,  164,  155,  170,  185,  201,  155,
      155,  160,  169,  169,  164,  171,  165,  165,  157,  165,
      173,  162,  165,  169,  155,  167,  167,  172,  171,  174,

      170,  174,  174,  186,  183,  170,  167,  167,  182,  178,
      178,  190,    0,  172,  171,    0,  185,  201,    0,  173,
      178,  179,  179,    0,  178,  178,  172,  191,    0,  179,
        0,  202,  179,  180,  180,  203,  167,  176,  176,  186,
      190,  180,  216,  216,  180,  176,    0,  191,  176,  219,
      176,  179,  176,  176,  184,  184,  191,  184,  187,  187,
      184,  192,  176,  180,  188,  188,  187,  202,  206,  187,
      187,  193,  193,    0,  203,  188,  188,  194,  194,  193,
      220,  192,  193,    0,  214,  194,  193,  193,  219,  197,
      192,  197,  196,  196,  197,  197,  193,    0,    0,  187,

      196,  198,  198,  196,  206,  188,  225,  196,  196,  198,
      199,  199,  198,  214,  200,  200,  220,  196,  199,  204,
      204,  199,  200,  208,  208,  200,  215,  204,  213,  213,
      204,  208,  224,  223,  208,  211,  211,  217,  217,  213,
      199,    0,  225,  211,    0,  217,  211,  211,  217,  215,
      218,  218,  217,  217,    0,  215,  221,  221,  218,    0,
        0,  218,  223,    0,  221,    0,    0,  221,  221,  226,
      226,  224,    0,    0,    0,    0,  211,  226,    0,    0,
      226,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  221,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  230,  230,  230,    0,  230,    0,
      230,  230,    0,  230,  230,  231,  231,  231,  231,  231,
      232,  232,    0,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  233,  233,    0,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  236,  236,    0,    0,    0,  236,  236,  236,

      236,  236,  236,  237,    0,  237,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  241,  241,    0,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  242,  242,    0,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      243,    0,  243,  244,  244,  244,    0,    0,    0,    0,
        0,    0,  244,  244,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  246,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  250,  250,
        0,    0,    0,  250,  250,  250,  250,  250,  250,  251,
      251,    0,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  252,  252,    0,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  253,  253,  253,    0,    0,
        0,    0,    0,    0,  253,  253,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  255,    0,
      255,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  260,  260,    0,  260,    0,  260,  260,
      260,  260,  260,  260,  261,  261,    0,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  262,  262,    0,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,

      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "whereLexer.ll"
/* $Id$ -*- mode: c++ -*-

   Author: John Wu <John.Wu at acm.org>
   Lawrence Berkeley National Laboratory
   Copyright 2007-2013 the Regents of the University of California
 */
#line 9 "whereLexer.ll"
/** \file Defines the tokenlizer using Flex C++ template. */

#include "whereLexer.h"		// definition of YY_DECL
#include "whereParser.hh"	// class ibis::wherParser

typedef ibis::whereParser::token token;
typedef ibis::whereParser::token_type token_type;

#define yyterminate() return token::END
#define YY_USER_ACTION  yylloc->columns(yyleng);
/* Flex declarations and options */
#define YY_NO_UNISTD_H 1
/*%option noyywrap*/
/*%option case-insensitive*/
/* regular expressions used to shorten the definitions 

the following definition of a name is somehow bad
DIGIT	[0-9]
ALPHA	[_a-zA-Z]
NAME	{ALPHA}((->)?[{DIGIT}{ALPHA}:.]+)*(\[[^\]]+\])?

this version works -- guess I can not use {ALPHA}
NAME	[_a-zA-Z]((->)?[_a-zA-Z0-9.:\[\]]+)*
*/
#line 778 "whereLexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 48 "whereLexer.ll"


    yylloc->step();

		   /* section defining the tokens */
#line 884 "whereLexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 228 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 227 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "whereLexer.ll"
{return token::LEOP;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "whereLexer.ll"
{return token::NEQOP;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "whereLexer.ll"
{return token::NEQOP;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "whereLexer.ll"
{return token::LTOP;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "whereLexer.ll"
{return token::GEOP;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "whereLexer.ll"
{return token::GTOP;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "whereLexer.ll"
{return token::EQOP;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 62 "whereLexer.ll"
{return token::EQOP;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 63 "whereLexer.ll"
{return token::OROP;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 64 "whereLexer.ll"
{return token::ANDOP;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 65 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 66 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 67 "whereLexer.ll"
{return token::BITOROP;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 68 "whereLexer.ll"
{return token::BITANDOP;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 69 "whereLexer.ll"
{return token::MINUSOP;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 70 "whereLexer.ll"
{return token::ADDOP;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 71 "whereLexer.ll"
{return token::MULTOP;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 72 "whereLexer.ll"
{return token::DIVOP;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 73 "whereLexer.ll"
{return token::REMOP;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 74 "whereLexer.ll"
{return token::EXPOP;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 75 "whereLexer.ll"
{return token::EXPOP;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 76 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 77 "whereLexer.ll"
{return token::NULLOP;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 78 "whereLexer.ll"
{return token::INOP;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 79 "whereLexer.ll"
{return token::OROP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 80 "whereLexer.ll"
{return token::ANDOP;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 81 "whereLexer.ll"
{return token::ANYOP;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 82 "whereLexer.ll"
{return token::XOROP;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 83 "whereLexer.ll"
{return token::LIKEOP;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 84 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 85 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 86 "whereLexer.ll"
{return token::BETWEENOP;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 87 "whereLexer.ll"
{return token::CONTAINSOP;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 89 "whereLexer.ll"
{ /* a name, unquoted string */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a name: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::NOUNSTR;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "whereLexer.ll"
{ /* an integer or a floating-point number (without a sign) */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a floating-point number: " << yytext;
#endif
    yylval->doubleVal = atof(yytext);
    return token::NUMBER;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 107 "whereLexer.ll"
{ /* a hexidacimal string */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a hexadecimal integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readUInt(yylval->uint64Val, tmp);
    if (ierr != 0) {
	throw "failed to parse a hexadecimal integer";
    }
    return token::UINT64;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 120 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
	<< __FILE__ << ':' << __LINE__ << " got a unsigned integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readUInt(yylval->uint64Val, tmp);
    if (ierr != 0)
	throw "failed to parse a unsigned integer";
    return token::UINT64;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 132 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
	<< __FILE__ << ':' << __LINE__ << " got a 64-bit integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readInt(yylval->int64Val, tmp);
    if (ierr != 0)
	throw "failed to parse a long integer";
    return token::INT64;
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 144 "whereLexer.ll"
{/*\(\)*/
    /* a series of long integers */ /*  */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a signed integer sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::INTSEQ;
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 154 "whereLexer.ll"
{
    /* a series of unsigned long integers */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a unsigned integer sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::UINTSEQ;
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 164 "whereLexer.ll"
{ /* a quoted string literal */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a quoted string: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::STRLIT;
}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 173 "whereLexer.ll"
{ /* a number series */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a number sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::NUMSEQ;
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 182 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a string sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::STRSEQ;
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 191 "whereLexer.ll"
; /* do nothing for blank space */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 193 "whereLexer.ll"
{ /* pass the character to the parser as a token */
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 197 "whereLexer.ll"
ECHO;
	YY_BREAK
#line 1294 "whereLexer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	_whereLexer_free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	_whereLexer_free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_whereLexer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _whereLexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 228 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 228 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 227);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _whereLexer_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _whereLexer_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_whereLexer_free((void *) b->yy_ch_buf  );

	_whereLexer_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)_whereLexer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)_whereLexer_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) _whereLexer_alloc(new_size  );

		else
			(yy_start_stack) = (int *) _whereLexer_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_whereLexer_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *_whereLexer_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _whereLexer_free (void * ptr )
{
	free( (char *) ptr );	/* see _whereLexer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 197 "whereLexer.ll"


/* additional c++ code to complete the definition of class whereLexer */
ibis::whereLexer::whereLexer(std::istream* in, std::ostream* out)
    : ::_wLexer(in, out) {
#if defined(DEBUG) && DEBUG + 0 > 1
    yy_flex_debug = true;
#endif
}

ibis::whereLexer::~whereLexer() {
}

/* function needed by the super-class of ibis::whereLexer */
#ifdef yylex
#undef yylex
#endif

int ::_wLexer::yylex() {
    return 0;
} // ::_wLexer::yylex

int ::_wLexer::yywrap() {
    return 1;
} // ::_wLexer::yywrap

