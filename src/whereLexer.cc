#line 2 "whereLexer.cc"

#line 4 "whereLexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer _whereLexer_FlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *_whereLexer_alloc (yy_size_t  );
void *_whereLexer_realloc (void *,yy_size_t  );
void _whereLexer_free (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 49
#define YY_END_OF_BUFFER 50
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[254] =
    {   0,
        0,    0,   50,   48,   47,   47,    1,   48,   21,   16,
       48,   48,   19,   18,   17,   48,   20,   38,   38,    6,
        9,    8,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   22,   48,   15,    2,   47,    4,    0,
       44,    0,   13,   12,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   23,    0,   38,   38,
       38,    0,   41,   40,    0,    3,    5,   10,    7,    0,
       37,   37,    0,   37,   37,   37,   26,   37,   37,   37,
       37,   27,   37,    0,    0,   11,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
       41,   40,   39,    0,   28,   29,    0,   37,   37,   37,
       37,   37,   24,   37,   30,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
       43,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   37,   37,   37,   37,   37,   31,   37,   25,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   37,   37,   37,   37,
       32,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   33,
       37,   37,   34,    0,    0,   45,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
        0,    0,    0,    0,    0,    0,    0,   35,   37,    0,
        0,    0,    0,    0,    0,    0,    0,   36,    0,    0,
        0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   13,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   29,   30,   29,   31,   32,   33,   34,   35,   29,
       29,   36,   37,   38,   39,   29,   40,   41,   42,   29,
       43,   44,   45,   46,   29,   47,   23,   24,   25,   26,

       27,   28,   29,   29,   30,   29,   31,   32,   33,   34,
       35,   29,   29,   36,   37,   38,   39,   29,   40,   41,
       42,   29,    1,   48,    1,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[50] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    4,    1,    5,
        1,    6,    7,    8,    8,    1,    9,    9,   10,    1,
        1,    1,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   10,    1,   13,    1,    4,    1,    1
    } ;

static yyconst flex_int16_t yy_base[304] =
    {   0,
        0,    0,  359, 1360,   48,   50,  231,   49, 1360,   51,
       48,   99,  239,   42,   44,   46, 1360,   50,   56,   48,
      222,  219,   62,   67,   43,   65,   83,   84,   76,   85,
       95,   89,   98, 1360,   76,  190, 1360,  119, 1360,  118,
     1360,    0, 1360, 1360, 1360,  121,    0,  164,  126,  127,
      122,  125,  210,  195,  142,  139, 1360,  131,  133,  141,
      169,  176,  200,  129,    0, 1360, 1360, 1360, 1360,  135,
      159,  163,    0,  160,  161,  177,  166,  183,  196,  178,
      186,  201,  205,  191,    0, 1360,  212,  214,  219,  151,
        0,  223,    0,  216,  251,  277,  257,  259,  283,  295,

        0,  259,  298,  130,  307,    0,  237,    0,  229,  248,
     1360,  104,    0,  268,  273,  269,   42,  274,  285,  288,
      299,  290,  304,  305,  308,  316,  325,  324,  329,  327,
      321,  323,  359,  326,  362,  385, 1360,  398,  353,  404,
     1360,  391,  416,  379,  422,  341,  346,  429,  376,  431,
       40,  397,  335, 1360,  409,  414,  353,  421,  424,  425,
      405,  435,  438,  453,  481,  460,  474,  335,  487,  484,
      436,  504,  471,  507,    0,  477,    0,  509,  524,   58,
      531,    0,  495,    0,  528,  505,  504,  510,  521,  522,
      514,  537,  340,  573,  433,  560,  579,  591,    0,  535,

      540,  594,  541,  559,  603,  564,  607,   30,  587,  544,
      584,  600,  593,  622,  558, 1360,  635,  642,  655,  661,
      667,  575,  607,  617,  673,    0,  622,    0,  679, 1360,
       50,  685,    0,  634,    0,  688,  659,  612,  659,  441,
      702,  704,  628,  677,  720,   21,  692,  665,  704,  702,
      722,  703, 1360,  763,  776,  788,  793,  805,  818,  831,
      844,  857,  869,  881,  886,  897,  909,  922,  935,  948,
      961,  966,  976,  988, 1000, 1013, 1026, 1039, 1052, 1065,
     1077, 1089, 1102, 1115, 1128, 1140, 1152, 1164, 1169, 1180,
     1193, 1206, 1219, 1231, 1243, 1256, 1269, 1282, 1295, 1307,

     1320, 1333, 1346
    } ;

static yyconst flex_int16_t yy_def[304] =
    {   0,
      253,    1,  253,  253,  253,  253,  253,  254,  253,  253,
      255,  256,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  253,  258,  253,  253,  253,  253,  254,
      253,  259,  253,  253,  253,  255,  260,  256,  261,  262,
      253,  253,  253,   53,  263,  264,  253,  253,  253,  253,
      253,  253,  253,  253,  265,  253,  253,  253,  253,  253,
      257,  257,  266,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  258,  267,  253,  268,  269,  261,  253,
      270,  262,  271,   53,  253,  253,  253,  253,  253,  253,

      272,  253,  273,  253,  263,  274,  264,  275,  253,  253,
      253,  253,  265,  257,  257,  257,  266,  257,  257,  257,
      257,  257,  257,  257,  257,  276,  268,  269,  277,  278,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  272,  273,  279,  280,  281,  282,  263,
      274,  283,  257,  253,  257,  257,  257,  257,  257,  257,
      276,  277,  278,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  279,  253,  284,  280,  285,  253,  286,  253,
      281,  287,  282,  288,  253,  283,  257,  257,  257,  257,
      257,  253,  253,  253,  253,  253,  253,  253,  289,  290,

      291,  286,  292,  293,  294,  295,  281,  287,  296,  257,
      257,  257,  257,  253,  165,  253,  253,  253,  253,  253,
      289,  290,  291,  292,  253,  297,  293,  298,  253,  253,
      253,  294,  299,  295,  300,  253,  296,  257,  257,  253,
      253,  253,  301,  302,  294,  299,  303,  257,  301,  302,
      253,  303,    0,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253
    } ;

static yyconst flex_int16_t yy_nxt[1410] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,    4,
       13,   14,    4,   15,   16,   17,   18,   19,    4,   20,
       21,   22,   23,   24,   25,   26,   27,   26,   26,   28,
       26,   29,   30,   31,   32,   26,   26,   26,   26,   26,
       33,   26,    4,    4,    4,   34,   35,   36,   37,   38,
       38,   38,   38,   41,   43,   41,   70,   44,   58,   58,
       58,   58,   59,   59,   60,  251,   61,   61,   66,   67,
       60,  245,   61,   61,  236,   70,   62,   75,   70,  207,
       70,   63,   62,   41,  185,   73,  154,   63,   64,   70,
       65,   47,   42,   74,   64,   72,   70,   70,   70,   45,

       48,   48,   70,   49,   73,   78,   50,   73,   70,   73,
       51,   70,   51,   52,   79,   53,   54,   77,   73,   85,
       38,   38,   41,   76,   82,   73,   73,   73,   41,   80,
       90,   73,   83,   81,   90,  112,   52,   73,   94,   94,
       73,   95,   95,  102,  102,   56,   90,   58,   58,   59,
       59,  150,  102,  102,  103,  104,  114,   59,   59,   62,
      112,   42,   63,  103,   47,   48,   48,   62,   49,   91,
       93,   50,   70,   70,   70,   51,   70,   51,   52,   70,
       53,   54,  108,   60,  106,   61,   61,  109,  115,  109,
       70,   70,  110,  110,  119,   62,   70,  118,   41,   70,

       63,   73,   73,   73,  116,   73,  120,   64,   73,   70,
       56,   96,   96,  121,   70,  123,   41,  124,   70,   73,
       73,   41,   96,   90,   97,   73,   54,   54,   73,  122,
       90,  111,   94,   94,   85,  253,   98,   86,   73,   69,
      125,   99,   68,   73,   90,  110,  110,   73,  100,   57,
      101,   39,   96,   96,  253,   42,  253,   47,   96,   96,
      102,  102,   91,   96,  110,  110,   93,   95,   95,   96,
      134,  103,  134,   95,   95,  135,  135,   98,   96,   96,
      108,  253,   70,   98,  136,  136,   70,   70,  131,   96,
      131,  132,  137,  133,  133,  138,  140,  140,   70,  145,

      145,   70,  146,   70,  141,  147,  153,  142,  102,  102,
      253,   73,   70,  155,  139,   73,   73,   70,   70,  103,
      104,   70,  156,   41,  157,  158,  143,   73,  159,   41,
       73,   41,   73,   90,   90,  132,  160,  133,  133,  164,
      164,   73,  135,  135,  149,  174,   73,   73,   70,  106,
       73,  169,  169,  174,  136,  136,  214,  214,  253,   85,
      165,  165,  137,   96,   96,  138,   70,   47,   42,  187,
       93,  165,   91,  166,   96,  133,  133,   73,  135,  135,
      140,  140,  253,  174,  175,  167,  136,  136,  141,  177,
      190,  142,  142,  142,  137,   73,  168,  138,  168,  138,

      138,  169,  169,  142,   90,  140,  140,  170,  171,  168,
      138,  168,   41,  141,  169,  169,  142,  140,  140,  184,
      170,  171,   70,  145,  145,  141,  146,   70,  142,  147,
      178,  178,  253,  253,   70,  188,  189,   70,   70,   90,
      108,  179,  180,  253,  253,   90,  253,  172,   85,  196,
      196,   73,  171,  171,  165,  165,   73,  241,  241,  253,
      191,  165,  165,   73,  253,  165,   73,   73,  149,  164,
      164,  182,  165,  253,  198,  174,  164,  164,   91,  167,
      253,   93,  165,  165,  174,  195,  167,  195,  136,  136,
      196,  196,  192,  165,  192,  193,  137,  194,  194,  138,

      171,  171,  174,  169,  169,  140,  140,  253,  178,  178,
      178,  178,   90,  141,  175,  253,  142,   70,  197,  179,
      177,  179,  198,   70,  199,  202,  202,   70,  203,  102,
      102,  204,  178,  178,   70,   70,  211,  253,  184,  174,
      103,  210,  253,  179,  180,  225,   73,  174,  108,  253,
      212,  193,   73,  194,  194,  253,   73,   70,  213,  215,
      215,  165,  165,   73,   73,  253,  225,  216,  253,  253,
      206,  225,  165,  182,  215,  215,  196,  196,  175,  174,
      136,  136,  216,  177,  226,  165,   73,  217,  137,  194,
      194,  138,  140,  140,  174,  202,  202,   70,  203,  218,

      141,  204,  228,  142,  229,  229,   70,  235,  253,  253,
      219,  253,  230,   70,  174,  179,  231,  238,  175,  253,
      253,  225,  220,  215,  215,   70,   73,  253,  253,  225,
      184,  216,  225,  239,  165,   73,  215,  215,  214,  214,
      206,  225,   73,  253,  216,  233,  253,  165,  218,  253,
      177,  214,  214,  240,   73,  240,  136,  136,  241,  241,
      226,  218,  140,  140,  137,  228,  174,  138,  140,  140,
      141,  226,   70,  142,  229,  229,  141,  235,   70,  142,
      229,  229,  230,  253,  225,  179,  229,  229,  230,  178,
      178,  179,  242,  253,  230,  248,  253,  179,  231,  225,

      179,   73,  184,  215,  215,  140,  140,   73,  225,  225,
      225,  216,  253,  141,  165,  253,  142,  253,  241,  241,
      228,  253,  253,  229,  229,  253,  253,  233,  253,  253,
      253,  230,  253,  253,  179,  235,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  228,  235,  226,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   55,
       55,   55,  253,   55,  253,   55,   55,  253,   55,   55,

       71,   71,   71,   71,   71,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   87,   87,
      253,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   88,   88,  253,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
      105,  105,  253,  253,  253,  105,  105,  105,  105,  105,
      105,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  113,  253,  113,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  117,  117,  126,
      126,  253,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  129,  129,
      253,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  130,  130,  253,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  144,  253,  144,  148,  148,  148,
      253,  253,  253,  253,  253,  253,  148,  148,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      152,  152,  253,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  181,  181,
      253,  253,  253,  181,  181,  181,  181,  181,  181,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  200,  200,  253,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  201,  201,
      253,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  205,  205,  205,  253,  253,  253,  253,  253,  253,
      205,  205,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  209,  209,  253,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  221,  253,  221,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  223,  223,  223,  223,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  232,  232,  253,  232,  253,  232,  232,  232,
      232,  232,  232,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  243,
      243,  253,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  244,  244,  253,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  247,  247,  253,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,    3,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  253
    } ;

static yyconst flex_int16_t yy_chk[1410] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    6,    6,    8,   10,   11,   25,   10,   14,   14,
       15,   15,   16,   16,   18,  246,   18,   18,   20,   20,
       19,  231,   19,   19,  208,   23,   18,   25,   26,  180,
       24,   18,   19,   35,  151,   25,  117,   19,   18,   29,
       18,   11,    8,   24,   19,   23,   27,   28,   30,   10,

       12,   12,   32,   12,   23,   29,   12,   26,   31,   24,
       12,   33,   12,   12,   30,   12,   12,   28,   29,   35,
       38,   38,   40,   27,   32,   27,   28,   30,   46,   31,
       49,   32,   33,   31,   50,  112,   51,   31,   51,   51,
       33,   52,   52,   55,   55,   12,   56,   58,   58,   59,
       59,  104,   90,   90,   55,   55,   70,   60,   60,   59,
       64,   40,   58,   90,   46,   48,   48,   60,   48,   49,
       50,   48,   71,   74,   75,   48,   72,   48,   48,   77,
       48,   48,   56,   61,   55,   61,   61,   62,   72,   62,
       76,   80,   62,   62,   75,   61,   78,   74,   84,   81,

       61,   71,   74,   75,   72,   72,   76,   61,   77,   79,
       48,   53,   53,   78,   82,   80,   87,   81,   83,   76,
       80,   88,   53,   89,   53,   78,   53,   53,   81,   79,
       92,   63,   94,   94,   84,   54,   53,   36,   79,   22,
       83,   53,   21,   82,  107,  109,  109,   83,   53,   13,
       53,    7,   95,   95,   94,   87,   94,   88,   97,   97,
      102,  102,   89,   95,  110,  110,   92,   95,   95,   97,
       98,  102,   98,   97,   97,   98,   98,   95,   96,   96,
      107,  114,  116,   97,   99,   99,  115,  118,   96,   96,
       96,   96,   99,   96,   96,   99,  100,  100,  119,  103,

      103,  120,  103,  122,  100,  103,  115,  100,  105,  105,
      114,  116,  121,  118,   99,  115,  118,  123,  124,  105,
      105,  125,  119,  126,  120,  121,  100,  119,  122,  127,
      120,  128,  122,  129,  130,  131,  124,  131,  131,  132,
      132,  121,  134,  134,  103,  146,  123,  124,  153,  105,
      125,  168,  168,  147,  139,  139,  193,  193,    3,  126,
      133,  133,  139,  135,  135,  139,  157,  128,  127,  153,
      130,  133,  129,  133,  135,  133,  133,  153,  135,  135,
      144,  144,    0,  149,  146,  133,  136,  136,  144,  147,
      157,  144,  142,  142,  136,  157,  136,  136,  136,  138,

      138,  136,  136,  142,  152,  140,  140,  142,  142,  138,
      138,  138,  161,  140,  138,  138,  140,  143,  143,  149,
      140,  140,  155,  145,  145,  143,  145,  156,  143,  145,
      148,  148,  150,  150,  158,  155,  156,  159,  160,  162,
      152,  148,  148,  150,  150,  163,    0,  143,  161,  195,
      195,  155,  171,  171,  164,  164,  156,  240,  240,    0,
      159,  166,  166,  158,    0,  164,  159,  160,  145,  164,
      164,  148,  166,  150,  171,  173,  166,  166,  162,  164,
        0,  163,  165,  165,  176,  167,  166,  167,  169,  169,
      167,  167,  165,  165,  165,  165,  169,  165,  165,  169,

      170,  170,  183,  169,  169,  172,  172,    0,  174,  174,
      178,  178,  186,  172,  173,    0,  172,  187,  169,  174,
      176,  178,  170,  188,  170,  179,  179,  191,  179,  185,
      185,  179,  181,  181,  189,  190,  188,    0,  183,  200,
      185,  187,    0,  181,  181,  203,  187,  201,  186,    0,
      189,  192,  188,  192,  192,    0,  191,  210,  190,  215,
      215,  196,  196,  189,  190,    0,  204,  215,    0,    0,
      179,  206,  196,  181,  194,  194,  196,  196,  200,  222,
      197,  197,  194,  201,  203,  194,  210,  194,  197,  194,
      194,  197,  198,  198,  209,  202,  202,  211,  202,  194,

      198,  202,  204,  198,  205,  205,  213,  206,  207,  207,
      197,    0,  205,  212,  223,  205,  205,  211,  222,  207,
      207,  224,  198,  214,  214,  238,  211,    0,    0,  227,
      209,  214,  243,  212,  214,  213,  217,  217,  214,  214,
      202,  234,  212,    0,  217,  205,    0,  217,  214,  207,
      223,  217,  217,  218,  238,  218,  219,  219,  218,  218,
      224,  217,  220,  220,  219,  227,  237,  219,  221,  221,
      220,  243,  239,  220,  225,  225,  221,  234,  248,  221,
      229,  229,  225,    0,  244,  225,  232,  232,  229,  236,
      236,  229,  220,    0,  232,  239,    0,  232,  232,  247,

      236,  239,  237,  241,  241,  242,  242,  248,  249,  250,
      252,  241,    0,  242,  241,    0,  242,    0,  241,  241,
      244,  245,  245,  251,  251,    0,    0,  232,    0,  245,
        0,  251,  245,  245,  251,  247,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  250,  252,  249,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  245,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  256,
      256,  256,    0,  256,    0,  256,  256,    0,  256,  256,

      257,  257,  257,  257,  257,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  259,  259,
        0,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  260,  260,    0,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      263,  263,    0,    0,    0,  263,  263,  263,  263,  263,
      263,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  265,    0,  265,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  267,
      267,    0,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  270,  270,
        0,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  271,  271,    0,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  272,    0,  272,  273,  273,  273,
        0,    0,    0,    0,    0,    0,  273,  273,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      275,  275,    0,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  281,  281,
        0,    0,    0,  281,  281,  281,  281,  281,  281,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  284,  284,    0,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  285,  285,
        0,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  286,  286,  286,    0,    0,    0,    0,    0,    0,
      286,  286,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  288,  288,    0,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  289,    0,  289,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  294,  294,    0,  294,    0,  294,  294,  294,
      294,  294,  294,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  297,
      297,    0,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  298,  298,    0,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  299,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  300,  300,    0,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  253
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "whereLexer.ll"
/* $Id$ -*- mode: c++ -*-

   Author: John Wu <John.Wu at acm.org>
   Lawrence Berkeley National Laboratory
   Copyright 2007-2014 the Regents of the University of California
 */
#line 9 "whereLexer.ll"
/** \file Defines the tokenlizer using Flex C++ template. */

#include "whereLexer.h"		// definition of YY_DECL
#include "whereParser.hh"	// class ibis::wherParser

typedef ibis::whereParser::token token;
typedef ibis::whereParser::token_type token_type;

#define yyterminate() return token::END
#define YY_USER_ACTION  yylloc->columns(yyleng);
/* Flex declarations and options */
#define YY_NO_UNISTD_H 1
/*%option noyywrap*/
/*%option case-insensitive*/
/* regular expressions used to shorten the definitions 

the following definition of a name is somehow bad
DIGIT	[0-9]
ALPHA	[_a-zA-Z]
NAME	{ALPHA}((->)?[{DIGIT}{ALPHA}:.]+)*(\[[^\]]+\])?

this version works -- guess I can not use {ALPHA}
NAME	[_a-zA-Z]((->)?[_a-zA-Z0-9.:\[\]]+)*
*/
#line 841 "whereLexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 48 "whereLexer.ll"


    yylloc->step();

		   /* section defining the tokens */
#line 947 "whereLexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 254 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 253 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "whereLexer.ll"
{return token::LEOP;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "whereLexer.ll"
{return token::NEQOP;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "whereLexer.ll"
{return token::NEQOP;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "whereLexer.ll"
{return token::LTOP;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "whereLexer.ll"
{return token::GEOP;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "whereLexer.ll"
{return token::GTOP;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "whereLexer.ll"
{return token::EQOP;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 62 "whereLexer.ll"
{return token::EQOP;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 63 "whereLexer.ll"
{return token::OROP;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 64 "whereLexer.ll"
{return token::ANDOP;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 65 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 66 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 67 "whereLexer.ll"
{return token::BITOROP;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 68 "whereLexer.ll"
{return token::BITANDOP;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 69 "whereLexer.ll"
{return token::MINUSOP;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 70 "whereLexer.ll"
{return token::ADDOP;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 71 "whereLexer.ll"
{return token::MULTOP;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 72 "whereLexer.ll"
{return token::DIVOP;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 73 "whereLexer.ll"
{return token::REMOP;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 74 "whereLexer.ll"
{return token::EXPOP;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 75 "whereLexer.ll"
{return token::EXPOP;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 76 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 77 "whereLexer.ll"
{return token::NULLOP;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 78 "whereLexer.ll"
{return token::INOP;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 79 "whereLexer.ll"
{return token::OROP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 80 "whereLexer.ll"
{return token::ANDOP;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 81 "whereLexer.ll"
{return token::ANYOP;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 82 "whereLexer.ll"
{return token::XOROP;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 83 "whereLexer.ll"
{return token::LIKEOP;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 84 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 85 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 86 "whereLexer.ll"
{return token::EXISTSOP;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 87 "whereLexer.ll"
{return token::BETWEENOP;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 88 "whereLexer.ll"
{return token::CONTAINSOP;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 90 "whereLexer.ll"
{ /* a name, unquoted string */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a name: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::NOUNSTR;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "whereLexer.ll"
{ /* an integer or a floating-point number (without a sign) */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a floating-point number: " << yytext;
#endif
    yylval->doubleVal = atof(yytext);
    return token::NUMBER;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 108 "whereLexer.ll"
{ /* a hexidacimal string */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a hexadecimal integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readUInt(yylval->uint64Val, tmp);
    if (ierr != 0) {
	throw "failed to parse a hexadecimal integer";
    }
    return token::UINT64;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 121 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
	<< __FILE__ << ':' << __LINE__ << " got a unsigned integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readUInt(yylval->uint64Val, tmp);
    if (ierr != 0)
	throw "failed to parse a unsigned integer";
    return token::UINT64;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 133 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
	<< __FILE__ << ':' << __LINE__ << " got a 64-bit integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readInt(yylval->int64Val, tmp);
    if (ierr != 0)
	throw "failed to parse a long integer";
    return token::INT64;
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 145 "whereLexer.ll"
{/*\(\)*/
    /* a series of long integers */ /*  */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a signed integer sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::INTSEQ;
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 155 "whereLexer.ll"
{
    /* a series of unsigned long integers */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a unsigned integer sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::UINTSEQ;
}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 165 "whereLexer.ll"
{ /* a quoted string literal */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a quoted string: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::STRLIT;
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 174 "whereLexer.ll"
{ /* a number series */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a number sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::NUMSEQ;
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 183 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a string sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::STRSEQ;
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 192 "whereLexer.ll"
; /* do nothing for blank space */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 194 "whereLexer.ll"
{ /* pass the character to the parser as a token */
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 198 "whereLexer.ll"
ECHO;
	YY_BREAK
#line 1362 "whereLexer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	_whereLexer_free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	_whereLexer_free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_whereLexer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _whereLexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 254 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 254 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 253);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _whereLexer_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _whereLexer_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_whereLexer_free((void *) b->yy_ch_buf  );

	_whereLexer_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)_whereLexer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)_whereLexer_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) _whereLexer_alloc(new_size  );

		else
			(yy_start_stack) = (int *) _whereLexer_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_whereLexer_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *_whereLexer_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _whereLexer_free (void * ptr )
{
	free( (char *) ptr );	/* see _whereLexer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 198 "whereLexer.ll"


/* additional c++ code to complete the definition of class whereLexer */
ibis::whereLexer::whereLexer(std::istream* in, std::ostream* out)
    : ::_wLexer(in, out) {
#if defined(DEBUG) && DEBUG + 0 > 1
    yy_flex_debug = true;
#endif
}

ibis::whereLexer::~whereLexer() {
}

/* function needed by the super-class of ibis::whereLexer */
#ifdef yylex
#undef yylex
#endif

int ::_wLexer::yylex() {
    return 0;
} // ::_wLexer::yylex

int ::_wLexer::yywrap() {
    return 1;
} // ::_wLexer::yywrap

